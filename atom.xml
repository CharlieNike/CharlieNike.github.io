<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CharlieNike</title>
  
  <subtitle>房玉辉区块链博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-04T12:56:02.305Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MWEB简介和使用帮助</title>
    <link href="http://yoursite.com/2018/05/01/MWeb%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2018/05/01/MWeb使用简介/</id>
    <published>2018-05-01T15:36:20.000Z</published>
    <updated>2018-05-04T12:56:02.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎使用-MWeb"><a href="#欢迎使用-MWeb" class="headerlink" title="欢迎使用 MWeb"></a>欢迎使用 MWeb</h1><p>首先介绍一下 MWeb 是什么，MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件。MWeb 使用的是 Github Flavored Markdown 语法，在使用 MWeb 前，建议你一定要去 <a href="http://zh.mweb.im/" target="_blank" rel="noopener">MWeb 官网首页</a> 看一下介绍视频，MWeb 官网也做了比较详细的帮助，建议你也看一下大概内容，帮助的网址为：<a href="http://zh.mweb.im/help.html" target="_blank" rel="noopener">http://zh.mweb.im/help.html</a>。</p><h2 id="需要您重点注意的"><a href="#需要您重点注意的" class="headerlink" title="需要您重点注意的"></a>需要您重点注意的</h2><p><img src="http://p83c9zj44.bkt.clouddn.com/chs.jpg" alt="chs_.pi"></p><a id="more"></a><p>MWeb 是有<strong>两种模式</strong>的：外部模式和文档库模式。MWeb 为了满足所有 Markdown 使用需求，设计了两种模式！外部模式用于打开和编辑所有本地 Markdown 文档。另外为了方便用 Markdown 记笔记，MWeb 设计了文档库模式，文档库中的文档也支持一键生成静态博客，以便于分享。关于两个模式的情况，还是建议您去看一下官网的视频和帮助。</p><h2 id="帮助我们改进-MWeb"><a href="#帮助我们改进-MWeb" class="headerlink" title="帮助我们改进 MWeb"></a>帮助我们改进 MWeb</h2><p>如果你喜欢 MWeb，想让它变得更好，你可以：</p><ol><li>推荐 MWeb，让更多的人知道。</li><li>给我们发反馈和建议：<a href="mailto:&#x63;&#x6f;&#x64;&#x65;&#x72;&#x66;&#111;&#x72;&#97;&#114;&#116;&#x2b;&#50;&#51;&#51;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;" target="_blank" rel="noopener">&#x63;&#x6f;&#x64;&#x65;&#x72;&#x66;&#111;&#x72;&#97;&#114;&#116;&#x2b;&#50;&#51;&#51;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></li><li>在 Mac App Store 上评价 （如果是在 MAS 上购买的话）。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;欢迎使用-MWeb&quot;&gt;&lt;a href=&quot;#欢迎使用-MWeb&quot; class=&quot;headerlink&quot; title=&quot;欢迎使用 MWeb&quot;&gt;&lt;/a&gt;欢迎使用 MWeb&lt;/h1&gt;&lt;p&gt;首先介绍一下 MWeb 是什么，MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件。MWeb 使用的是 Github Flavored Markdown 语法，在使用 MWeb 前，建议你一定要去 &lt;a href=&quot;http://zh.mweb.im/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MWeb 官网首页&lt;/a&gt; 看一下介绍视频，MWeb 官网也做了比较详细的帮助，建议你也看一下大概内容，帮助的网址为：&lt;a href=&quot;http://zh.mweb.im/help.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://zh.mweb.im/help.html&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;需要您重点注意的&quot;&gt;&lt;a href=&quot;#需要您重点注意的&quot; class=&quot;headerlink&quot; title=&quot;需要您重点注意的&quot;&gt;&lt;/a&gt;需要您重点注意的&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://p83c9zj44.bkt.clouddn.com/chs.jpg&quot; alt=&quot;chs_.pi&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MWEB使用" scheme="http://yoursite.com/categories/MWEB%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="MWeb" scheme="http://yoursite.com/tags/MWeb/"/>
    
  </entry>
  
  <entry>
    <title>用go语言简单实现SHA256哈希算法</title>
    <link href="http://yoursite.com/2018/05/01/%E7%94%A8go%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0SHA256%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%EF%BC%9A/"/>
    <id>http://yoursite.com/2018/05/01/用go语言简单实现SHA256哈希算法：/</id>
    <published>2018-05-01T15:36:20.000Z</published>
    <updated>2018-05-04T12:49:46.780Z</updated>
    
    <content type="html"><![CDATA[<p>用go语言简单实现SHA256哈希算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;crypto/sha256&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">string := &quot;Hello&quot;  //需要哈希的字符串内容</span><br><span class="line"></span><br><span class="line">hash := sha256.New()   //声明sha256哈希函数</span><br><span class="line">hash.Write([]byte(string))</span><br><span class="line">bs := hash.Sum(nil)</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;%x&quot;, bs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h5><p>185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969<br>其中，hash.Write()写入需要生成哈希的内容，h.Sum()添加额外的[]byte到当前的哈希中。</p><a id="more"></a><h5 id="生成符合某一条件的哈希："><a href="#生成符合某一条件的哈希：" class="headerlink" title="生成符合某一条件的哈希："></a>生成符合某一条件的哈希：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;crypto/sha256&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func isvhd(hash string, diff int) bool &#123;</span><br><span class="line">var i int</span><br><span class="line">for i = 0; i &lt; len(hash); i++ &#123;</span><br><span class="line">if hash[i] != &apos;8&apos; &#123;   //哈希字符串的前diff个字符是否为8，如果不为8，结束循环。</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return i &gt;= diff</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">nonce := 0</span><br><span class="line">hash := &quot;&quot;</span><br><span class="line"></span><br><span class="line">shaobj := sha256.New()</span><br><span class="line"></span><br><span class="line">prehash := &quot;0000fedaa499741317a18f1ad626f933776ad24822cb422634978bfe8005c94b&quot;</span><br><span class="line">//prehash := &quot;185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969&quot;</span><br><span class="line">count := 0     //循环的次数</span><br><span class="line">for !isvhd(hash, 4) &#123;</span><br><span class="line">nonce++</span><br><span class="line">input := &quot;100&quot; + prehash + &quot;Thu, 26 Apr 2018 03:30:54 GMT&quot; + &quot;A -&gt; B 1000&quot; + string(nonce)</span><br><span class="line">shaobj.Write([]byte(input))</span><br><span class="line">hash = fmt.Sprintf(&quot;%x&quot;, shaobj.Sum(nil))</span><br><span class="line">fmt.Println(hash)</span><br><span class="line">count++</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;count:&quot;, count)</span><br><span class="line">fmt.Println(&quot;nonce:&quot;, nonce)</span><br><span class="line">fmt.Println(hash)</span><br><span class="line">fmt.Println(len(hash))     //哈希字符串的长度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果：-1"><a href="#运行结果：-1" class="headerlink" title="运行结果："></a>运行结果：</h5><p>············<br>0c7d465c78faf8dcc359343df18d535497b6dee228577f84b236e908193c6522<br>8888448863c33dff9acdc99dc6b85ca3329716c4d6fa3f51a540e2b977347ac6<br>count: 11743<br>nonce: 11743<br>8888448863c33dff9acdc99dc6b85ca3329716c4d6fa3f51a540e2b977347ac6<br>64</p><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>isvhd（）函数用来判断生成的哈希内容是否满足某一条件，此处为判断生成的哈希数，前4位数是否为8。若不满足这一条件，则给nonce加1，再次生成哈希，直到生成一个前4位数均为8的哈希，结束循环。<br>生成了一个前四位数为8的哈希，哈希字符串长度为64，循环了11743次。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用go语言简单实现SHA256哈希算法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;crypto/sha256&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	string := &amp;quot;Hello&amp;quot;  //需要哈希的字符串内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hash := sha256.New()   //声明sha256哈希函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hash.Write([]byte(string))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bs := hash.Sum(nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&amp;quot;%x&amp;quot;, bs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;运行结果：&quot;&gt;&lt;a href=&quot;#运行结果：&quot; class=&quot;headerlink&quot; title=&quot;运行结果：&quot;&gt;&lt;/a&gt;运行结果：&lt;/h5&gt;&lt;p&gt;185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969&lt;br&gt;其中，hash.Write()写入需要生成哈希的内容，h.Sum()添加额外的[]byte到当前的哈希中。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="go语言" scheme="http://yoursite.com/tags/go%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/04/21/%E7%AC%AC18%E7%AB%A0-%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2018/04/21/第18章-反射/</id>
    <published>2018-04-21T12:53:11.444Z</published>
    <updated>2018-04-21T12:53:11.459Z</updated>
    
    <content type="html"><![CDATA[<p>#反射reflect</p><h2 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h2><p>Java的反射机制是其标志性的特征之一，正是这种语言本身支持的强大的机制使得很多流行的框架有了用武之地。C++中虽然也能实现，但是语言本身并没有提供标准的支持。<br>而作为一门现代的语言，go语言也引入了反射机制，在这篇文章中我们将会了解一下go语言中的反射机制是如何使用的。</p><p>反射机制<br>反射机制是程序能够检查其自身结构，属于元编程的范畴，强大的同时也往往是困扰的源头。虽然各种语言的反射模型有所不同，但是通过简单的比较也能有所收获。在了解Go的反射机制之前先来看看Java的反射机制吧。</p><p>Java的反射机制<br>我们所熟知的Java的反射机制是什么？对于类和对象的使用，普通的方式是知道类和对象的属性和方法之后进行调用或者访问。<br>而反射机制，简单来说，是在运行状态中，Java对于任何的类，都能够确认到这个类的所有方法和属性；对于任何一个对象，都能调用它的任意方法和属性。这种动态获取或者调用的方式就是Java的反射机制。</p><p>能做什么<br>在Java中，通过反射机制在运行时能够做到如下：</p><p>确认对象的类<br>确认类的所有成员变量和方法<br>动态调用任意一个对象的方法<br>…</p><h2 id="二、相关基础"><a href="#二、相关基础" class="headerlink" title="二、相关基础"></a>二、相关基础</h2><p>在进行更加详细的了解之前，我们需要重新温习一下Go语言相关的一些特性，所谓温故知新，从这些特性中了解其反射机制是如何使用的。</p><table><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td>go语言是静态类型语言。</td><td>编译时类型已经确定，比如对已基本数据类型的再定义后的类型，反射时候需要确认返回的是何种类型。</td></tr><tr><td>空接口interface{}</td><td>go的反射机制是要通过接口来进行的，而类似于Java的Object的空接口可以和任何类型进行交互，因此对基本数据类型等的反射也直接利用了这一特点</td></tr></tbody></table><h2 id="三、反射的使用"><a href="#三、反射的使用" class="headerlink" title="三、反射的使用"></a>三、反射的使用</h2><p>所谓反射就是动态运行时的状态。我们一般用到的包是reflect包</p><p>使用reflect一般分成三步：</p><p>首先需要把它转化成reflect对象(reflect.Type或者reflect.Value，根据不同的情况调用不同的函数)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t := reflect.TypeOf(i) <span class="comment">//得到类型的元数据,通过t我们能获取类型定义里面的所有元素</span></span><br><span class="line">v := reflect.ValueOf(i) <span class="comment">//得到实际的值，通过v我们获取存储在里面的值，还可以去改变值</span></span><br></pre></td></tr></table></figure><p>获取反射值能返回相应的类型和数值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></span><br><span class="line">v := reflect.ValueOf(x)</span><br><span class="line">fmt.Println(<span class="string">"type:"</span>, v.Type())</span><br><span class="line">fmt.Println(<span class="string">"kind is float64:"</span>, v.Kind() == reflect.Float64)</span><br><span class="line">fmt.Println(<span class="string">"value:"</span>, v.Float())</span><br></pre></td></tr></table></figure><p>如果是struct的话，可以使用Elem()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tag := t.Elem().Field(<span class="number">0</span>).Tag <span class="comment">//获取定义在struct里面的Tag属性</span></span><br><span class="line">name := v.Elem().Field(<span class="number">0</span>).String() <span class="comment">//获取存储在第一个字段里面的值</span></span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></span><br><span class="line">p := reflect.ValueOf(&amp;x)</span><br><span class="line">v := p.Elem()<span class="comment">//必须的步骤</span></span><br><span class="line">v.SetFloat(<span class="number">7.1</span>)</span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">//1.“接口类型变量”=&gt;“反射类型对象”</span></span><br><span class="line"><span class="keyword">var</span> circle <span class="keyword">float64</span> = <span class="number">6.28</span></span><br><span class="line"><span class="keyword">var</span> icir <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">icir = circle</span><br><span class="line">fmt.Println(<span class="string">"Reflect : circle.Value = "</span>, reflect.ValueOf(icir)) <span class="comment">//Reflect : circle.Value =  6.28</span></span><br><span class="line">fmt.Println(<span class="string">"Reflect : circle.Type  = "</span>, reflect.TypeOf(icir)) <span class="comment">//Reflect : circle.Type =  float64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. “反射类型对象”=&gt;“接口类型变量</span></span><br><span class="line">v1 := reflect.ValueOf(icir)</span><br><span class="line">fmt.Println(v1) <span class="comment">//6.28</span></span><br><span class="line">fmt.Println(v1.Interface()) <span class="comment">//6.28</span></span><br><span class="line"></span><br><span class="line">y := v1.Interface().(<span class="keyword">float64</span>)</span><br><span class="line">fmt.Println(y) <span class="comment">//6.28</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//v1.SetFloat(4.13) //panic: reflect: reflect.Value.SetFloat using unaddressable value</span></span><br><span class="line"><span class="comment">//fmt.Println(v1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.修改</span></span><br><span class="line">fmt.Println(v1.CanSet())<span class="comment">//是否可以进行修改</span></span><br><span class="line">v2 := reflect.ValueOf(&amp;circle) <span class="comment">// 传递指针才能修改</span></span><br><span class="line">v4:=v2.Elem()<span class="comment">// 传递指针才能修改,获取Elem()才能修改</span></span><br><span class="line">fmt.Println(v4.CanSet()) <span class="comment">//true</span></span><br><span class="line">v4.SetFloat(<span class="number">3.14</span>)</span><br><span class="line">fmt.Println(circle) <span class="comment">//3.14</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、结构体"><a href="#四、结构体" class="headerlink" title="四、结构体"></a>四、结构体</h2><h3 id="4-1可以通过反射，获取结构体对象的属性和方法"><a href="#4-1可以通过反射，获取结构体对象的属性和方法" class="headerlink" title="4.1可以通过反射，获取结构体对象的属性和方法"></a>4.1可以通过反射，获取结构体对象的属性和方法</h3><h3 id="4-2可以通过反射，调用结构体方法"><a href="#4-2可以通过反射，调用结构体方法" class="headerlink" title="4.2可以通过反射，调用结构体方法"></a>4.2可以通过反射，调用结构体方法</h3><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.提供一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">Sex <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.提供一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">Say</span><span class="params">(msg <span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello.."</span>, msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">PrintInfo</span><span class="params">()</span></span>  &#123;</span><br><span class="line">fmt.Println(<span class="string">"姓名："</span>,p.Name,<span class="string">"年龄："</span>,p.Age,<span class="string">"性别："</span>,p.Sex)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">p1:=Person&#123;<span class="string">"王二狗"</span>,<span class="number">30</span>,<span class="string">"男"</span>&#125;</span><br><span class="line"><span class="comment">//反射使用 TypeOf 和 ValueOf 函数从接口中获取目标对象信息</span></span><br><span class="line"><span class="comment">//1.获取对象的类型</span></span><br><span class="line">t1:=reflect.TypeOf(p1)</span><br><span class="line">fmt.Println(t1) <span class="comment">//main.Person</span></span><br><span class="line">fmt.Println(<span class="string">"p1的类型是："</span>,t1.Name())<span class="comment">//调用t.Name方法来获取这个类型的名称</span></span><br><span class="line">k1:=t1.Kind() <span class="comment">//struct</span></span><br><span class="line">fmt.Println(k1)</span><br><span class="line"><span class="comment">//2.获取值，如果是结构体类型，获取的是字段的值</span></span><br><span class="line">v1:=reflect.ValueOf(p1) <span class="comment">//&#123;王二狗 30 男&#125;</span></span><br><span class="line">fmt.Println(v1)</span><br><span class="line"><span class="keyword">if</span> t1.Kind() == reflect.Struct&#123;</span><br><span class="line"><span class="comment">//是结构体类型，获取里面的字段名字</span></span><br><span class="line">fmt.Println(t1.NumField()); <span class="comment">//3</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;t1.NumField();i++&#123;</span><br><span class="line">field := t1.Field(i)</span><br><span class="line"><span class="comment">//fmt.Println(field) //&#123;Name  string  0 [0] false&#125;,&#123;Age  int  16 [1] false&#125;,&#123;Sex  string  24 [2] false&#125;</span></span><br><span class="line">val:=v1.Field(i).Interface()<span class="comment">//通过interface方法来取出这个字段所对应的值</span></span><br><span class="line">fmt.Printf(<span class="string">"字段名字：%s,字段类型：%s,字段数值：%v\n"</span>,field.Name,field.Type,val)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.操作方法</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;t1.NumMethod();i++&#123;</span><br><span class="line">m:=t1.Method(i)</span><br><span class="line">fmt.Println(m.Name,m.Type) <span class="comment">//Hello func(main.Person)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;Hello  func(main.Person) &lt;func(main.Person) Value&gt; 0&#125;</span></span><br><span class="line"><span class="comment">&#123;PrintInfo  func(main.Person) &lt;func(main.Person) Value&gt; 1&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m1 := v1.MethodByName(<span class="string">"Say"</span>)</span><br><span class="line">args:=[]reflect.Value&#123;reflect.ValueOf(<span class="string">"干啥呢？"</span>)&#125;</span><br><span class="line">m1.Call(args)</span><br><span class="line"></span><br><span class="line">m2:=v1.MethodByName(<span class="string">"PrintInfo"</span>)</span><br><span class="line">m2.Call(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体中包含匿名结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">Animal</span><br><span class="line">Color <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取匿名字段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">c1:= Cat&#123;Animal&#123;<span class="string">"猫咪"</span>,<span class="number">1</span>&#125;,<span class="string">"白色"</span>&#125;</span><br><span class="line">t1:=reflect.TypeOf(c1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;t1.NumField();i++&#123;</span><br><span class="line">fmt.Println(t1.Field(i))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;Animal  main.Animal  0 [0] true&#125;</span></span><br><span class="line"><span class="comment">&#123;Color  string  24 [1] false&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// FiledByIndex()的参数是一个切片，第一个数是Animal字段，第二个参数是Animal的第一个字段</span></span><br><span class="line">f1:=t1.FieldByIndex([]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">0</span>&#125;)</span><br><span class="line">f2:=t1.FieldByIndex([]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;)</span><br><span class="line">fmt.Println(f1)<span class="comment">//&#123;Name  string  0 [0] false&#125;</span></span><br><span class="line">fmt.Println(f2) <span class="comment">//&#123;Age  int  16 [1] false&#125;</span></span><br><span class="line"></span><br><span class="line">v1:=reflect.ValueOf(c1)</span><br><span class="line">fmt.Println(v1.Field(<span class="number">0</span>)) <span class="comment">//&#123;猫咪 1&#125;</span></span><br><span class="line">fmt.Println(v1.FieldByIndex([]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">0</span>&#125;)) <span class="comment">//猫咪</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-可以通过反射，修改结构体的数据"><a href="#4-3-可以通过反射，修改结构体的数据" class="headerlink" title="4.3.可以通过反射，修改结构体的数据"></a>4.3.可以通过反射，修改结构体的数据</h3><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">School <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">修改内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">s1:= Student&#123;<span class="string">"王二狗"</span>,<span class="number">18</span>,<span class="string">"清华大学"</span>&#125;</span><br><span class="line">v1 := reflect.ValueOf(&amp;s1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v1.Kind() ==reflect.Ptr &amp;&amp; v1.Elem().CanSet()&#123;</span><br><span class="line">v1 = v1.Elem()</span><br><span class="line">fmt.Println(<span class="string">"可以修改。。"</span>)</span><br><span class="line">&#125;</span><br><span class="line">f1:=v1.FieldByName(<span class="string">"Name"</span>)</span><br><span class="line">fmt.Println(f1.CanSet())</span><br><span class="line">f1.SetString(<span class="string">"王三狗"</span>)</span><br><span class="line">f2:=v1.FieldByName(<span class="string">"Age"</span>)</span><br><span class="line">fmt.Println(f2.CanSet())</span><br><span class="line">f2.SetInt(<span class="number">20</span>)</span><br><span class="line">fmt.Println(s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#反射reflect&lt;/p&gt;
&lt;h2 id=&quot;一、引入&quot;&gt;&lt;a href=&quot;#一、引入&quot; class=&quot;headerlink&quot; title=&quot;一、引入&quot;&gt;&lt;/a&gt;一、引入&lt;/h2&gt;&lt;p&gt;Java的反射机制是其标志性的特征之一，正是这种语言本身支持的强大的机制使得很多流行的框
      
    
    </summary>
    
    
  </entry>
  
</feed>
