<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jelinek</title>
  
  <subtitle>房玉辉区块链博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-28T10:45:10.196Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>房玉辉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在本地网络部署super—dictionary智能合约</title>
    <link href="http://yoursite.com/2018/05/03/%E5%9C%A8localhost%E9%83%A8%E7%BD%B2super%E2%80%94dictionary%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    <id>http://yoursite.com/2018/05/03/在localhost部署super—dictionary智能合约/</id>
    <published>2018-05-03T11:10:00.000Z</published>
    <updated>2018-07-28T10:45:10.196Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h5><a id="more"></a><h5 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h5><h3 id="星云链Dapp开发系列"><a href="#星云链Dapp开发系列" class="headerlink" title="星云链Dapp开发系列"></a><a href="https://charlienike.github.io/tags/星云链Dapp开发/" target="_blank" rel="noopener">星云链Dapp开发系列</a></h3><h4 id="在本地网络（localhost）部署super-dictionary智能合约"><a href="#在本地网络（localhost）部署super-dictionary智能合约" class="headerlink" title="在本地网络（localhost）部署super-dictionary智能合约"></a>在本地网络（localhost）部署super-dictionary智能合约</h4><p>super-dictionary智能合约源码下载地址：<a href="https://github.com/15010159959/super-dictionary" target="_blank" rel="noopener">https://github.com/15010159959/super-dictionary</a></p><h6 id="1、解决本地交易网络错误问题："><a href="#1、解决本地交易网络错误问题：" class="headerlink" title="1、解决本地交易网络错误问题："></a>1、解决本地交易网络错误问题：</h6><p>进入go/src/github.com/nebulasio/go-nebulas/conf/default文件夹，打开config.conf文件，找到以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rpc &#123;</span><br><span class="line">    rpc_listen: [<span class="string">"0.0.0.0:8684"</span>]</span><br><span class="line">    http_listen: [<span class="string">"0.0.0.0:8685"</span>]</span><br><span class="line">    http_module: [<span class="string">"api"</span>,<span class="string">"admin"</span>]</span><br><span class="line">    # HTTP CORS allowed origins</span><br><span class="line">    # http_cors: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去掉最后一行代码的注释，并更改如下：<br><code>http_cors: [&quot;*&quot;]</code></p><h6 id="2、进入super-dictionary-master-lib文件夹："><a href="#2、进入super-dictionary-master-lib文件夹：" class="headerlink" title="2、进入super-dictionary-master/lib文件夹："></a>2、进入super-dictionary-master/lib文件夹：</h6><p>打开nebPay.js文件：<br>找到第四行代码：<br><code>var payUrl = &quot;http://18.221.150.42/api/pay&quot;;</code><br>更改为：<br><code>var payUrl = &quot;http://localhost:8685/api/pay&quot;;</code></p><h6 id="3、启动节点："><a href="#3、启动节点：" class="headerlink" title="3、启动节点："></a>3、启动节点：</h6><p>打开第一个终端窗口，启动第一个星云节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/nebulasio/go-nebulas</span><br><span class="line">./neb -c conf/default/config.conf</span><br></pre></td></tr></table></figure><p>再打开一个终端窗口，启动第一个矿工节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/nebulasio/go-nebulas</span><br><span class="line">./neb -c conf/example/miner.conf</span><br></pre></td></tr></table></figure><h6 id="4、部署合约："><a href="#4、部署合约：" class="headerlink" title="4、部署合约："></a>4、部署合约：</h6><p>打开web-wallet钱包，部署super-dictionary智能合约到星云链localhost网络：<br>进入web-wallet文件夹，用浏览器打开index.html文件，点击合约，再点击部署，找到super-dictionary-master/smartContract文件夹下的super-dictionary.js文件，将全部代码粘贴到合约代码框内：<br><img src="http://p83c9zj44.bkt.clouddn.com/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6.jpeg" alt=""><br>选择钱包文件，输入密码，点击解锁，再点击测试，<br><img src="http://p83c9zj44.bkt.clouddn.com/%E6%B5%8B%E8%AF%95.jpeg" alt=""><br>再点击提交：<br><img src="http://p83c9zj44.bkt.clouddn.com/%E6%8F%90%E4%BA%A4.jpeg" alt=""><br>保存好合约地址：<br><code>n1wfeKn7GSjo8GbAE64CgUPyxwqLrpWWLnK</code><br>点击交易哈希，查看交易状态，下图为部署成功：<br><img src="http://p83c9zj44.bkt.clouddn.com/%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.png" alt=""></p><h6 id="5、执行、调用合约，与前端交互："><a href="#5、执行、调用合约，与前端交互：" class="headerlink" title="5、执行、调用合约，与前端交互："></a>5、执行、调用合约，与前端交互：</h6><p>进入super-dictionary-master文件夹，用开发工具打开index.html文件，找到第190行代码，将合约地址粘贴过来：<br><code>var dappAddress = &quot;n1wfeKn7GSjo8GbAE64CgUPyxwqLrpWWLnK&quot;;</code><br>保存后，用浏览器打开index.html文件，随便输入“比特币”一词，可以看到，没有释义，但是底下有一句话：</p><blockquote><p>Failed to find related information. Do you want to add infromation for “比特币”?</p></blockquote><p><img src="http://p83c9zj44.bkt.clouddn.com/%E6%89%A7%E8%A1%8C%E5%90%88%E7%BA%A6.jpeg" alt=""><br>并且add可以点击，点击add后可以添加释义，输入如下释义：<br>“比特币（BitCoin）的概念最初由中本聪在2009年提出，根据中本聪的思路设计发布的开源软件以及建构其上的P2P网络。比特币是一种P2P形式的数字货币。”<br><img src="http://p83c9zj44.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E9%87%8A%E4%B9%89.jpeg" alt=""><br>点击submit，之后会弹出WebExtensionWallet钱包页面，选择localhost当地钱包文件，输入密码“passphrase”，<br><img src="http://p83c9zj44.bkt.clouddn.com/%E6%8F%90%E4%BA%A4submit.jpeg" alt=""><br>点击生成交易，<br><img src="http://p83c9zj44.bkt.clouddn.com/%E7%94%9F%E6%88%90%E4%BA%A4%E6%98%93.jpeg" alt=""><br>再点击交易确认，<br><img src="http://p83c9zj44.bkt.clouddn.com/%E4%BA%A4%E6%98%93%E7%A1%AE%E8%AE%A4.jpeg" alt=""><br>正在打包：<br><img src="http://p83c9zj44.bkt.clouddn.com/%E7%A1%AE%E8%AE%A4.jpeg" alt=""><br>交易打包成功：<br><img src="http://p83c9zj44.bkt.clouddn.com/%E9%87%8A%E4%B9%89%E6%88%90%E5%8A%9F.jpeg" alt=""><br>查询，如图所示：<br><img src="http://p83c9zj44.bkt.clouddn.com/local%E6%9F%A5%E8%AF%8D.jpeg" alt=""><br>至此，super-dictionary智能合约部署成功，前端调用合约成功。</p><font color="#FF0000" size="5">版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信</font>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h5&gt;
    
    </summary>
    
      <category term="智能合约" scheme="http://yoursite.com/categories/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
    
      <category term="星云链Dapp开发" scheme="http://yoursite.com/tags/%E6%98%9F%E4%BA%91%E9%93%BEDapp%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>在星云链测试网部署super-dictionary智能合约</title>
    <link href="http://yoursite.com/2018/05/02/%E5%9C%A8%E6%98%9F%E4%BA%91%E9%93%BE%E6%B5%8B%E8%AF%95%E7%BD%91%E9%83%A8%E7%BD%B2super-dictionary%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    <id>http://yoursite.com/2018/05/02/在星云链测试网部署super-dictionary智能合约/</id>
    <published>2018-05-02T12:02:13.000Z</published>
    <updated>2018-07-28T10:44:51.844Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h5><a id="more"></a><h5 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h5><h3 id="星云链Dapp开发系列"><a href="#星云链Dapp开发系列" class="headerlink" title="星云链Dapp开发系列"></a><a href="https://charlienike.github.io/tags/星云链Dapp开发/" target="_blank" rel="noopener">星云链Dapp开发系列</a></h3><h4 id="在星云链测试网部署super-dictionary智能合约"><a href="#在星云链测试网部署super-dictionary智能合约" class="headerlink" title="在星云链测试网部署super-dictionary智能合约"></a>在星云链测试网部署super-dictionary智能合约</h4><p>工具：<a href="https://www.jetbrains.com/go/?fromMenu" target="_blank" rel="noopener">Goland</a>，<a href="https://www.google.cn/chrome/" target="_blank" rel="noopener">Chrome</a>，<a href="https://github.com/ChengOrangeJu/WebExtensionWallet" target="_blank" rel="noopener">WebExtensionWallet插件钱包</a><br>super-dictionary智能合约源码下载地址：<a href="https://github.com/15010159959/super-dictionary" target="_blank" rel="noopener">https://github.com/15010159959/super-dictionary</a></p><h6 id="1、下载星云链官方钱包："><a href="#1、下载星云链官方钱包：" class="headerlink" title="1、下载星云链官方钱包："></a>1、下载星云链官方钱包：</h6><p>到GitHub的星云官方库下载web-wallet钱包<a href="https://github.com/nebulasio/web-wallet" target="_blank" rel="noopener">https://github.com/nebulasio/web-wallet</a>，<img src="http://p90jdlzej.bkt.clouddn.com/%E4%B8%8B%E8%BD%BDweb-wallet.png" alt="">用谷歌浏览器打开文件包里的index.html，点击右上角，选择testnet网络，再新建钱包，牢记密码，并下载保存好密码库文件，<img src="http://p90jdlzej.bkt.clouddn.com/%E6%96%B0%E5%BB%BA%E9%92%B1%E5%8C%85.png" alt=""><br>申请测试币<a href="https://testnet.nebulas.io/claim/" target="_blank" rel="noopener">https://testnet.nebulas.io/claim/</a></p><h6 id="2、在谷歌浏览器上安装WebExtensionWallet插件钱包，有详细安装攻略。"><a href="#2、在谷歌浏览器上安装WebExtensionWallet插件钱包，有详细安装攻略。" class="headerlink" title="2、在谷歌浏览器上安装WebExtensionWallet插件钱包，有详细安装攻略。"></a>2、在谷歌浏览器上安装<a href="https://github.com/ChengOrangeJu/WebExtensionWallet" target="_blank" rel="noopener">WebExtensionWallet插件钱包</a>，有详细安装攻略。</h6><h6 id="3、部署合约"><a href="#3、部署合约" class="headerlink" title="3、部署合约"></a>3、部署合约</h6><p>下载super-dictionary智能合约：<a href="https://github.com/15010159959/super-dictionary" target="_blank" rel="noopener">https://github.com/15010159959/super-dictionary</a><br>打开super-dictionary-master/smartcontract文件夹下的super_dictionary.js文件，复制全部代码，打开web-wallet文件夹里的index.html文件，点击右上角选择Testnet测试网络，点击合约——部署，粘贴全部代码到合约部署框内，<img src="http://p90jdlzej.bkt.clouddn.com/%E9%83%A8%E7%BD%B2%E5%90%88%E7%BA%A6.png" alt=""><br>选择钱包文件，输入密码，点击解锁，<img src="http://p90jdlzej.bkt.clouddn.com/%E6%89%93%E5%BC%80%E9%92%B1%E5%8C%85.png" alt=""><br>再点击测试，后点击提交，保存好交易哈希和合约地址。<br>合约地址：<br><code>n1vPTmFsXNGCjZ3Dmf2ngEEyUeut7pqebaJ</code><br>用goland开发工具打开super-dictionary-master文件夹下的index.html，找到第190行，把合约地址粘贴过去并保存：<br><code>var dappAddress = &quot;n1vPTmFsXNGCjZ3Dmf2ngEEyUeut7pqebaJ&quot;;</code></p><h6 id="4、执行合约："><a href="#4、执行合约：" class="headerlink" title="4、执行合约："></a>4、执行合约：</h6><p>用谷歌浏览器打开super-dictionary-master文件夹下的index.html，点击浏览器右上角的插件钱包，选择Testnet测试网络，<img src="http://p90jdlzej.bkt.clouddn.com/%E9%92%B1%E5%8C%85%E7%BD%91%E7%BB%9C%E7%B1%BB%E5%9E%8B.png" alt=""><br>搜索“金庸”，<img src="http://p90jdlzej.bkt.clouddn.com/%E7%82%B9%E5%87%BB%E6%90%9C%E7%B4%A2.png" alt=""><br>可以看到没有释义，而输入框下面出现一句话，<br><code>Failed to find related information. Do you want to add infromation for “金庸”?</code><br>点击add添加释义，<img src="http://p90jdlzej.bkt.clouddn.com/%E6%90%9C%E7%B4%A2%E5%90%8E.png" alt=""><br><img src="http://p90jdlzej.bkt.clouddn.com/%E5%A1%AB%E5%86%99value.png" alt=""><br>点击submit提交后，就会弹出插件钱包，<img src="http://p90jdlzej.bkt.clouddn.com/%E7%82%B9%E5%87%BBsubmit%EF%BC%88text%EF%BC%89.jpeg" alt=""><br>选择钱包，输入密码，<img src="http://p90jdlzej.bkt.clouddn.com/点击解锁（text）.jpeg" alt=""><img src="http://p90jdlzej.bkt.clouddn.com/%E7%82%B9%E5%87%BB%E8%A7%A3%E9%94%81%E4%B8%8B%E5%8D%8A%E6%AE%B5%EF%BC%88text%EF%BC%89.jpeg" alt="">,<br>点击生成交易，<img src="http://p90jdlzej.bkt.clouddn.com/%E7%82%B9%E5%87%BB%E7%94%9F%E6%88%90%E4%BA%A4%E6%98%93%EF%BC%88text%EF%BC%89.jpeg" alt="">点击确认，<img src="http://p90jdlzej.bkt.clouddn.com/%E7%82%B9%E5%87%BB%E7%A1%AE%E8%AE%A4.jpeg" alt=""><br>大概一分钟后，交易成功，<img src="http://p90jdlzej.bkt.clouddn.com/%E4%BA%A4%E6%98%93%E6%88%90%E5%8A%9F%EF%BC%88text%EF%BC%89.jpeg" alt="">最后再次查询“金庸“，已经有了释义，<img src="http://p90jdlzej.bkt.clouddn.com/%E6%9C%80%E5%90%8E%E6%9F%A5%E8%AF%A2.png" alt=""><br>如此，合约部署成功。执行合约成功。</p><font color="#FF0000" size="5">版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信</font>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h5&gt;
    
    </summary>
    
      <category term="智能合约" scheme="http://yoursite.com/categories/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
    
      <category term="星云链Dapp开发" scheme="http://yoursite.com/tags/%E6%98%9F%E4%BA%91%E9%93%BEDapp%E5%BC%80%E5%8F%91/"/>
    
      <category term="super-dictionary智能合约" scheme="http://yoursite.com/tags/super-dictionary%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>搭建etcd多台服务器集群</title>
    <link href="http://yoursite.com/2018/02/11/%E6%90%AD%E5%BB%BAetcd%E5%A4%9A%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4/"/>
    <id>http://yoursite.com/2018/02/11/搭建etcd多台服务器集群/</id>
    <published>2018-02-11T13:08:05.000Z</published>
    <updated>2018-07-28T10:47:08.717Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h5><a id="more"></a><h5 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h5><ul><li><strong>1、清空缓存：在etcd目录下执行</strong><br>make clean<br><img src="http://p83c9zj44.bkt.clouddn.com/etcd%E6%B8%85%E7%A9%BA%E7%BC%93%E5%AD%98.png" alt=""></li><li><p><strong>2、导入API：在etcd/bin目录下执行</strong><br>export ETCDCTL_API=3</p></li><li><p><strong>3、设置服务器IP：在etcd/bin目录下执行</strong><br>三台机器按主机IP顺序执行以下同一段代码</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TOKEN=token<span class="number">-01</span></span><br><span class="line">CLUSTER_STATE=<span class="built_in">new</span></span><br><span class="line">NAME_1=machine<span class="number">-1</span></span><br><span class="line">NAME_2=machine<span class="number">-2</span></span><br><span class="line">NAME_3=machine<span class="number">-3</span></span><br><span class="line">HOST_1=<span class="number">10.0</span><span class="number">.154</span><span class="number">.189</span></span><br><span class="line">HOST_2=<span class="number">10.0</span><span class="number">.154</span><span class="number">.210</span></span><br><span class="line">HOST_3=<span class="number">10.0</span><span class="number">.154</span><span class="number">.244</span></span><br><span class="line">CLUSTER=$&#123;NAME_1&#125;=http:<span class="comment">//$&#123;HOST_1&#125;:2380,$&#123;NAME_2&#125;=http://$&#123;HOST_2&#125;:2380,$&#123;NAME_3&#125;=http://$&#123;HOST_3&#125;:2380</span></span><br></pre></td></tr></table></figure><ul><li><strong>4、启动服务：在etcd/bin目录下执行</strong></li></ul><p>三台机器按顺序执行各自命令：<br>machine1执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">THIS_NAME=$&#123;NAME_1&#125;</span><br><span class="line">THIS_IP=$&#123;HOST_1&#125;</span><br><span class="line">./etcd --data-dir=data.etcd --name $&#123;THIS_NAME&#125; --initial-advertise-peer-urls http://$&#123;THIS_IP&#125;:2380 --listen-peer-urls http://$&#123;THIS_IP&#125;:2380 --advertise-client-urls http://$&#123;THIS_IP&#125;:2379 --listen-client-urls http://$&#123;THIS_IP&#125;:2379 --initial-cluster $&#123;CLUSTER&#125; --initial-cluster-state $&#123;CLUSTER_STATE&#125; --initial-cluster-token $&#123;TOKEN&#125;</span><br></pre></td></tr></table></figure><p>machine2执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">THIS_NAME=$&#123;NAME_2&#125;</span><br><span class="line">THIS_IP=$&#123;HOST_2&#125;</span><br><span class="line">./etcd --data-dir=data.etcd --name $&#123;THIS_NAME&#125; --initial-advertise-peer-urls http://$&#123;THIS_IP&#125;:2380 --listen-peer-urls http://$&#123;THIS_IP&#125;:2380 --advertise-client-urls http://$&#123;THIS_IP&#125;:2379 --listen-client-urls http://$&#123;THIS_IP&#125;:2379 --initial-cluster $&#123;CLUSTER&#125; --initial-cluster-state $&#123;CLUSTER_STATE&#125; --initial-cluster-token $&#123;TOKEN&#125;</span><br></pre></td></tr></table></figure><p>machine3执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">THIS_NAME=$&#123;NAME_3&#125;</span><br><span class="line">THIS_IP=$&#123;HOST_3&#125;</span><br><span class="line">./etcd --data-dir=data.etcd --name $&#123;THIS_NAME&#125; --initial-advertise-peer-urls http://$&#123;THIS_IP&#125;:2380 --listen-peer-urls http://$&#123;THIS_IP&#125;:2380 --advertise-client-urls http://$&#123;THIS_IP&#125;:2379 --listen-client-urls http://$&#123;THIS_IP&#125;:2379 --initial-cluster $&#123;CLUSTER&#125; --initial-cluster-state $&#123;CLUSTER_STATE&#125; --initial-cluster-token $&#123;TOKEN&#125;</span><br></pre></td></tr></table></figure><p>machine3接入成功<br><img src="http://p83c9zj44.bkt.clouddn.com/%E4%B8%BB%E6%9C%BA3%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png" alt=""></p><ul><li><strong>5、检测几台机器接入集群：</strong></li></ul><p>新开一个终端：进入etcd/bin目录<br>导入IP：<br>export ETCDCTL_API=3<br>执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HOST_1=10.0.154.189</span><br><span class="line">HOST_2=10.0.154.210</span><br><span class="line">HOST_3=10.0.154.244</span><br><span class="line">ENDPOINTS=$HOST_1:2379,$HOST_2:2379,$HOST_3:2379</span><br><span class="line"></span><br><span class="line">./etcdctl --endpoints=$ENDPOINTS member list</span><br></pre></td></tr></table></figure><p>连接成功如图：<br><img src="http://p83c9zj44.bkt.clouddn.com/%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png" alt=""></p><font color="#FF0000" size="5">版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信</font>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h5&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="etcd多台服务器集群" scheme="http://yoursite.com/tags/etcd%E5%A4%9A%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>go语言常见面试题（数学篇）</title>
    <link href="http://yoursite.com/2018/01/03/go%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E6%95%B0%E5%AD%A6%E7%AF%87%EF%BC%89/"/>
    <id>http://yoursite.com/2018/01/03/go语言面试题（数学篇）/</id>
    <published>2018-01-03T12:55:20.000Z</published>
    <updated>2018-07-31T10:35:44.626Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h5><a id="more"></a><h5 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h5><h5 id="一、分解质因数：比如90，分解出：90-2-3-3-5"><a href="#一、分解质因数：比如90，分解出：90-2-3-3-5" class="headerlink" title="一、分解质因数：比如90，分解出：90=2*3*3*5"></a>一、分解质因数：比如90，分解出：<code>90=2*3*3*5</code></h5><p>分析：质数为大于1的自然数，除了1和它本身没有其他因数。相反，除了1和它本身还有其他因数的数，称为合数，所以，分解法为：先用这个合数最小的那个因数（是质数的因数）去除，商如果是合数，就继续除：商如果是质数，就停止，最后的这个商是它的最大的质因数。因此，最后可以写成所有的除数乘以最后的商。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">90</span></span><br><span class="line">fun(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Print(n, <span class="string">"="</span>, )</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> n%i == <span class="number">0</span> &#123;</span><br><span class="line">n = n / i</span><br><span class="line">fmt.Print(i, <span class="string">"*"</span>)</span><br><span class="line">i--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">90</span>=<span class="number">2</span>*<span class="number">3</span>*<span class="number">3</span>*<span class="number">5</span></span><br></pre></td></tr></table></figure><h5 id="二、计算-sum-n-1-3-2-5-3-7-…-n-2n-1-的前n项和"><a href="#二、计算-sum-n-1-3-2-5-3-7-…-n-2n-1-的前n项和" class="headerlink" title="二、计算 sum(n) = 1/3 + 2/5 + 3/7 + … + n/2n+1 的前n项和"></a>二、计算 sum(n) = 1/3 + 2/5 + 3/7 + … + n/2n+1 的前n项和</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n <span class="keyword">float32</span> = <span class="number">8</span></span><br><span class="line">fmt.Print(<span class="string">"sum("</span>, n, <span class="string">")=\t"</span>)</span><br><span class="line">sum := <span class="keyword">float32</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">float32</span>(<span class="number">1</span>); i &lt;= n; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i != n &#123;</span><br><span class="line">fmt.Print(i, <span class="string">"/"</span>, <span class="number">2</span>*i+<span class="number">1</span>, <span class="string">"\t+\t"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Print(i, <span class="string">"/"</span>, <span class="number">2</span>*i+<span class="number">1</span>, <span class="string">"\t"</span>)</span><br><span class="line">&#125;</span><br><span class="line">sum += i / (<span class="number">2</span>*i + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"="</span>, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="number">8</span>)=<span class="number">1</span>/<span class="number">3</span>+<span class="number">2</span>/<span class="number">5</span>+<span class="number">3</span>/<span class="number">7</span>+<span class="number">4</span>/<span class="number">9</span>+<span class="number">5</span>/<span class="number">11</span>+<span class="number">6</span>/<span class="number">13</span>+<span class="number">7</span>/<span class="number">15</span>+<span class="number">8</span>/<span class="number">17</span>= <span class="number">3.4596882</span></span><br></pre></td></tr></table></figure><h5 id="三、一球从100米高度自由落下，每次落地后又返跳回原高度的一半，再下落，求它第10次落地时，共经过多少米？"><a href="#三、一球从100米高度自由落下，每次落地后又返跳回原高度的一半，再下落，求它第10次落地时，共经过多少米？" class="headerlink" title="三、一球从100米高度自由落下，每次落地后又返跳回原高度的一半，再下落，求它第10次落地时，共经过多少米？"></a>三、一球从100米高度自由落下，每次落地后又返跳回原高度的一半，再下落，求它第10次落地时，共经过多少米？</h5><p>分析：从第2次开始，每次经过的距离为下落点的2倍，所以第10次落地共经过的距离为后9次的下落点的高度和乘以2加上第一次的100米。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hight <span class="keyword">float32</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> jump = hight</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">jump = jump / <span class="number">2</span></span><br><span class="line">hight += jump * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"第十次落地共经过："</span>, hight, <span class="string">"米。"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第十次落地共经过： <span class="number">299.60938</span> 米。</span><br></pre></td></tr></table></figure><h5 id="四、要求输入一个整数n，请你输出斐波那契数列的第n项-斐波那契数列0-1-1-2-3-5-8-13-21……"><a href="#四、要求输入一个整数n，请你输出斐波那契数列的第n项-斐波那契数列0-1-1-2-3-5-8-13-21……" class="headerlink" title="四、要求输入一个整数n，请你输出斐波那契数列的第n项[斐波那契数列0 1 1 2 3 5 8 13 21……]"></a>四、要求输入一个整数n，请你输出斐波那契数列的第n项[斐波那契数列0 1 1 2 3 5 8 13 21……]</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(fibonacci(<span class="number">8</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fibonacci(n<span class="number">-2</span>) + fibonacci(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：21</code></p><h5 id="五、求1-2-3-…-20-的和"><a href="#五、求1-2-3-…-20-的和" class="headerlink" title="五、求1+2!+3!+…+20!的和"></a>五、求1+2!+3!+…+20!的和</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="comment">// 把1到20的阶乘的和累加</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++ &#123;</span><br><span class="line">sum += fact(i)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  用递归求阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fact</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n * fact(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2561327494111820313</span></span><br></pre></td></tr></table></figure><h5 id="六、求101-200之内的素数"><a href="#六、求101-200之内的素数" class="headerlink" title="六、求101-200之内的素数"></a>六、求101-200之内的素数</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++ &#123;</span><br><span class="line">count := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">2</span>; j &lt; i; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> i%j == <span class="number">0</span> &#123;</span><br><span class="line">count++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> count == <span class="number">0</span> &#123;</span><br><span class="line">n++</span><br><span class="line">fmt.Print(i, <span class="string">"\t"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><code>101    103    107    109    113    127    131    137    139    149    151    157    163    167    173    179    181    191    193    197    199    21</code><br>共有21个。</p><h5 id="七、打印出所有的-“水仙花数-“，所谓-“水仙花数-“是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个-“水仙花数-“，因为153-1的三次方＋5的三次方＋3的三次方"><a href="#七、打印出所有的-“水仙花数-“，所谓-“水仙花数-“是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个-“水仙花数-“，因为153-1的三次方＋5的三次方＋3的三次方" class="headerlink" title="七、打印出所有的 “水仙花数 “，所谓 “水仙花数 “是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 “水仙花数 “，因为153=1的三次方＋5的三次方＋3的三次方"></a>七、打印出所有的 “水仙花数 “，所谓 “水仙花数 “是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 “水仙花数 “，因为153=1的三次方＋5的三次方＋3的三次方</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++ &#123;</span><br><span class="line">l := i / <span class="number">100</span></span><br><span class="line">m := i / <span class="number">10</span> % <span class="number">10</span></span><br><span class="line">n := i % <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> l*l*l+m*m*m+n*n*n == i &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">153</span></span><br><span class="line"><span class="number">370</span></span><br><span class="line"><span class="number">371</span></span><br><span class="line"><span class="number">407</span></span><br></pre></td></tr></table></figure><h5 id="八、利用递归方法求5"><a href="#八、利用递归方法求5" class="headerlink" title="八、利用递归方法求5!"></a>八、利用递归方法求5!</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := fact(<span class="number">5</span>)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fact</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n * fact(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><code>120</code></p><h5 id="九、有1、2、3、4四个数字，能组成多少个互不相同且无重复的三位数"><a href="#九、有1、2、3、4四个数字，能组成多少个互不相同且无重复的三位数" class="headerlink" title="九、有1、2、3、4四个数字，能组成多少个互不相同且无重复的三位数"></a>九、有1、2、3、4四个数字，能组成多少个互不相同且无重复的三位数</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">123</span>; i &lt;= <span class="number">432</span>; i++ &#123;</span><br><span class="line">g := i % <span class="number">10</span></span><br><span class="line">s := i % <span class="number">100</span> / <span class="number">10</span></span><br><span class="line">b := i / <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> g != s &amp;&amp; g != b &amp;&amp; s != b &amp;&amp; g &lt;= <span class="number">4</span> &amp;&amp; s &lt;= <span class="number">4</span> &amp;&amp; b &lt;= <span class="number">4</span> &amp;&amp; g != <span class="number">0</span> &amp;&amp; s != <span class="number">0</span> &amp;&amp; b != <span class="number">0</span> &#123;</span><br><span class="line">fmt.Print(i, <span class="string">"\t"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><code>123    124    132    134    142    143    213    214    231    234    241    243    312    314    321    324    341    342    412    413    421    423    431    432</code></p><h5 id="十、输入三个整数x-y-z，请把这三个数由小到大输出"><a href="#十、输入三个整数x-y-z，请把这三个数由小到大输出" class="headerlink" title="十、输入三个整数x,y,z，请把这三个数由小到大输出"></a>十、输入三个整数x,y,z，请把这三个数由小到大输出</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> y <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> z <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">fmt.Scanln(&amp;x, &amp;y, &amp;z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">x, y = y, x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> x &gt; z &#123;</span><br><span class="line">x, z = z, x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> y &gt; z &#123;</span><br><span class="line">y, z = z, y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x, y, z)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入：<code>15 20 2</code><br>运行结果：<br><code>2 15 20</code></p><h5 id="十一、求S-a-aa-aaa-aaaa-aa…a的值，其中a是一个数字。例如2-22-222-2222-22222（此时共有5个数相加），几个数相加由键盘控制。"><a href="#十一、求S-a-aa-aaa-aaaa-aa…a的值，其中a是一个数字。例如2-22-222-2222-22222（此时共有5个数相加），几个数相加由键盘控制。" class="headerlink" title="十一、求S=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222（此时共有5个数相加），几个数相加由键盘控制。"></a>十一、求S=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222（此时共有5个数相加），几个数相加由键盘控制。</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n <span class="keyword">int</span>, m <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">a := <span class="number">0</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">a = (a * <span class="number">10</span>) + m</span><br><span class="line">sum += a</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"sum="</span>, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><code>sum= 24690</code></p><h5 id="十二、古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？共12个月"><a href="#十二、古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？共12个月" class="headerlink" title="十二、古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？共12个月"></a>十二、古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？共12个月</h5><p>分析：从第三个月开始每个月的兔子总数为前两个月的兔子数量的和，因为上一个月的兔子到这个月都不生兔子，而上上一个月的兔子到这个月都会再生一对儿兔子，所以这个月新出生的兔子数量与上上个月的兔子总数相同。例如：</p><blockquote><p>6月的兔子总数   <strong>=</strong>   5月的兔子总数 <strong>+</strong>   6月新出生的兔子的数量<br>6月的兔子总数   <strong>=</strong>   5月的兔子总数 <strong>+</strong>   4月的兔子总数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">1</span></span><br><span class="line">b := <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++ &#123;</span><br><span class="line">a = b</span><br><span class="line">b = c</span><br><span class="line">c = a + b</span><br><span class="line">fmt.Print(c,<span class="string">"\t"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><code>1    1    2    3    5    8    13    21    34    55    89    144</code><br>这里还可以用递归方法做，12个月的兔子数量正好是一个斐波那契数列。</p><h5 id="十三、猴子分桃：海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？"><a href="#十三、猴子分桃：海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？" class="headerlink" title="十三、猴子分桃：海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？"></a>十三、猴子分桃：海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？</h5><p>分析：假如第五只猴子拿走的一份正好是一颗桃子，则最后一堆桃子数是：5+1=6（颗）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">num := <span class="number">6</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">num = num + <span class="number">5</span></span><br><span class="line">count := num</span><br><span class="line">monkey := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> (count<span class="number">-1</span>)%<span class="number">5</span> == <span class="number">0</span> &#123;</span><br><span class="line">count = (count - <span class="number">1</span>) / <span class="number">5</span> * <span class="number">4</span></span><br><span class="line">monkey++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="comment">//如果不满足扔一个还能均分5份，就跳出内层循环，再给num加5</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> monkey == <span class="number">5</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="comment">//如果不满足monkey等于5，就一直循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<code>3121</code></p><p>这里的很多题都有不止一种解法，就好像同样一种算法，可能每个人写的代码都不完全相同，有的可能逻辑更清晰，有的可能代码量更少，有的可能时间复杂度更低，实际开发中很多问题都需要针对不同的具体情况去优化。</p><font color="#FF0000" size="5">版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信</font>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h5&gt;
    
    </summary>
    
      <category term="go语言" scheme="http://yoursite.com/categories/go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Redis开源库redigo的使用</title>
    <link href="http://yoursite.com/2018/01/03/Redis%E5%BC%80%E6%BA%90%E5%BA%93redigo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/01/03/Redis开源库redigo的使用/</id>
    <published>2018-01-03T10:10:00.000Z</published>
    <updated>2018-08-23T09:15:02.969Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h5><a id="more"></a><h5 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h5><h2 id="打开终端，获取开源库redigo"><a href="#打开终端，获取开源库redigo" class="headerlink" title="打开终端，获取开源库redigo"></a>打开终端，获取开源库redigo</h2><h3 id="ElonJelinek-ElonJelinek-go-get-github-com-garyburd-redigo-redis"><a href="#ElonJelinek-ElonJelinek-go-get-github-com-garyburd-redigo-redis" class="headerlink" title="ElonJelinek:~ ElonJelinek$ go get github.com/garyburd/redigo/redis"></a>ElonJelinek:~ ElonJelinek$ go get github.com/garyburd/redigo/redis</h3><h2 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ElonJelinek:~ ElonJelinek$ redis-server /usr/local/etc/redis.conf</span><br><span class="line"><span class="number">2273</span>:C <span class="number">23</span> Aug <span class="number">15</span>:<span class="number">22</span>:<span class="number">52.471</span> # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line"><span class="number">2273</span>:C <span class="number">23</span> Aug <span class="number">15</span>:<span class="number">22</span>:<span class="number">52.471</span> # Redis version=<span class="number">4.0</span><span class="number">.11</span>, bits=<span class="number">64</span>, commit=<span class="number">00000000</span>, modified=<span class="number">0</span>, pid=<span class="number">2273</span>, just started</span><br><span class="line"><span class="number">2273</span>:C <span class="number">23</span> Aug <span class="number">15</span>:<span class="number">22</span>:<span class="number">52.471</span> # Configuration loaded</span><br><span class="line"><span class="number">2273</span>:M <span class="number">23</span> Aug <span class="number">15</span>:<span class="number">22</span>:<span class="number">52.473</span> * Increased maximum number of open files to <span class="number">10032</span> (it was originally set to <span class="number">256</span>).</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-<span class="string">``</span>__ <span class="string">''-._                                             </span></span><br><span class="line"><span class="string">      _.-``    `.  `_.  '</span><span class="string">'-._           Redis 4.0.11 (00000000/0) 64 bit</span></span><br><span class="line"><span class="string">  .-`` .-```.  ```\/    _.,_ '</span><span class="string">'-._                                   </span></span><br><span class="line"><span class="string"> (    '</span>      ,       .-<span class="string">`  | `</span>,    )     Running in standalone mode</span><br><span class="line"> |<span class="string">`-._`</span>-...-<span class="string">` __...-.`</span><span class="string">`-._|'`</span> _.-<span class="string">'|     Port: 6379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-'</span>    |     PID: <span class="number">2273</span></span><br><span class="line">  <span class="string">`-._    `</span>-._  <span class="string">`-./  _.-'    _.-'                                   </span></span><br><span class="line"><span class="string"> |`</span>-._<span class="string">`-._    `</span>-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |           http://redis.io        </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line"> |<span class="string">`-._`</span>-._    <span class="string">`-.__.-'    _.-'_.-'|                                  </span></span><br><span class="line"><span class="string"> |    `</span>-._<span class="string">`-._        _.-'_.-'    |                                  </span></span><br><span class="line"><span class="string">  `</span>-._    <span class="string">`-._`</span>-.__.-<span class="string">'_.-'</span>    _.-<span class="string">'                                   </span></span><br><span class="line"><span class="string">      `-._    `-.__.-'</span>    _.-<span class="string">'                                       </span></span><br><span class="line"><span class="string">          `-._        _.-'</span>                                           </span><br><span class="line">              <span class="string">`-.__.-'                                               </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2273:M 23 Aug 15:22:52.474 # Server initialized</span></span><br><span class="line"><span class="string">2273:M 23 Aug 15:22:52.474 * DB loaded from disk: 0.000 seconds</span></span><br><span class="line"><span class="string">2273:M 23 Aug 15:22:52.474 * Ready to accept connections</span></span><br></pre></td></tr></table></figure><h3 id="Goland编译器："><a href="#Goland编译器：" class="headerlink" title="Goland编译器："></a>Goland编译器：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/garyburd/redigo/redis"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//连接Redis</span></span><br><span class="line">c, err := redis.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:6379"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Connect to redis error"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//存入数据</span></span><br><span class="line">_, err = c.Do(<span class="string">"SET"</span>, <span class="string">"myname"</span>, <span class="string">"lixunhuan"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"redis set failed:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line">username, err := redis.String(c.Do(<span class="string">"GET"</span>, <span class="string">"myname"</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"redis get failed:"</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Get myname: %v \n"</span>, username)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get myname: lixunhuan</span><br></pre></td></tr></table></figure><h3 id="查询值是否存在："><a href="#查询值是否存在：" class="headerlink" title="查询值是否存在："></a>查询值是否存在：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/garyburd/redigo/redis"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c, err := redis.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:6379"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Connect to redis error"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line">is_key_exit, err := redis.Bool(c.Do(<span class="string">"EXISTS"</span>, <span class="string">"myname"</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"error:"</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"exists or not: %v \n"</span>, is_key_exit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists or not: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="删除值："><a href="#删除值：" class="headerlink" title="删除值："></a>删除值：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/garyburd/redigo/redis"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c, err := redis.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:6379"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Connect to redis error"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line">_, err = c.Do(<span class="string">"DEL"</span>, <span class="string">"myname"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"redis delete failed:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">username, err := redis.String(c.Do(<span class="string">"GET"</span>, <span class="string">"myname"</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"reids get failed:"</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Get myname: %v \n"</span>, username)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reids get failed: redigo: <span class="literal">nil</span> returned</span><br></pre></td></tr></table></figure><h3 id="json串的存取"><a href="#json串的存取" class="headerlink" title="json串的存取"></a>json串的存取</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/garyburd/redigo/redis"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c, err := redis.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:6379"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Connect to redis error"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line">key := <span class="string">"varurr"</span></span><br><span class="line">map1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"name"</span>: <span class="string">"berry"</span>, <span class="string">"age"</span>: <span class="string">"22"</span>&#125;</span><br><span class="line">value, _ := json.Marshal(map1)</span><br><span class="line"></span><br><span class="line">n, err := c.Do(<span class="string">"SETNX"</span>, key, value)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> n == <span class="keyword">int64</span>(<span class="number">1</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">"success"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> map2 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">getVlue, err := redis.Bytes(c.Do(<span class="string">"GET"</span>, key))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = json.Unmarshal(getVlue, &amp;map2)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(map2[<span class="string">"name"</span>])</span><br><span class="line">fmt.Println(map2[<span class="string">"age"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">success</span><br><span class="line">berry</span><br><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure><font color="#FF0000" size="5">版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信</font>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h5&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Redis数据库" scheme="http://yoursite.com/tags/Redis%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>用go语言爬虫珍爱网所有城市网址</title>
    <link href="http://yoursite.com/2018/01/02/%E7%94%A8go%E8%AF%AD%E8%A8%80%E7%88%AC%E8%99%AB%E7%8F%8D%E7%88%B1%E7%BD%91%E6%89%80%E6%9C%89%E5%9F%8E%E5%B8%82%E7%BD%91%E5%9D%80/"/>
    <id>http://yoursite.com/2018/01/02/用go语言爬虫珍爱网所有城市网址/</id>
    <published>2018-01-02T13:04:21.000Z</published>
    <updated>2018-07-28T10:45:36.912Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h5><a id="more"></a><h5 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h5><h3 id="爬虫珍爱网系列文章"><a href="#爬虫珍爱网系列文章" class="headerlink" title="爬虫珍爱网系列文章"></a><a href="https://charlienike.github.io/tags/go语言爬虫/" target="_blank" rel="noopener">爬虫珍爱网系列文章</a></h3><h4 id="go语言爬虫入门第一课"><a href="#go语言爬虫入门第一课" class="headerlink" title="go语言爬虫入门第一课"></a>go语言爬虫入门第一课</h4><h5 id="1、查看网站编码格式"><a href="#1、查看网站编码格式" class="headerlink" title="1、查看网站编码格式"></a>1、查看网站编码格式</h5><p>工具：<a href="http://www.jetbrains.com/go/?fromMenu" target="_blank" rel="noopener">GoLand</a>，<a href="https://www.google.cn/chrome/" target="_blank" rel="noopener">Chrome浏览器</a>，<br><a href="http://www.zhenai.com/" target="_blank" rel="noopener">珍爱网</a> 所有城市页面 <a href="http://www.zhenai.com/zhenghun" target="_blank" rel="noopener">http://www.zhenai.com/zhenghun</a><br><img src="http://p83c9zj44.bkt.clouddn.com/%E7%8F%8D%E7%88%B1%E7%BD%91%E6%89%80%E6%9C%89%E5%9F%8E%E5%B8%82%E9%A1%B5%E9%9D%A2.png" alt="所有城市页面"><br>首先右键鼠标，查看网页源代码，查看网站编码格式，这里以<a href="http://www.qqxiuzi.cn/zh/hanzi-gbk-bianma.php" target="_blank" rel="noopener">gbk</a>格式为例，<img src="http://p83c9zj44.bkt.clouddn.com/%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F1.png" alt="源代码">，<img src="http://p83c9zj44.bkt.clouddn.com/%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F2.png" alt="编码格式"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang.org/x/text/transform"</span></span><br><span class="line"><span class="string">"golang.org/x/text/encoding/simplifiedchinese"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cityListURL = <span class="string">"http://www.zhenai.com/zhenghun"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp, err := http.Get(cityListURL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err) <span class="comment">//如果err不为空,说明出现错误数据，Panic结束程序。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close() <span class="comment">//关闭数据解析请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != http.StatusOK &#123;</span><br><span class="line">fmt.Println(<span class="string">"Error:Status Code:"</span>, resp.StatusCode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以gbk格式读取网站源代码，</span></span><br><span class="line">utf8Reader := transform.NewReader(resp.Body, simplifiedchinese.GBK.NewDecoder())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取网页所有数据，ReadAll方法返回值为[]byte字节数组，和err</span></span><br><span class="line">allData, err1 := ioutil.ReadAll(utf8Reader)</span><br><span class="line"><span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err1)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 将字节数组转换为字符串，并打印输出</span></span><br><span class="line">fmt.Println(<span class="keyword">string</span>(allData))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网站编码格式有很多种，比如还有utf-8等格式，为了更好的封装，我们来写个方法，自动判断网站的编码格式，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">determinEncoding</span><span class="params">(r io.Reader)</span> <span class="title">encoding</span>.<span class="title">Encoding</span></span> &#123;</span><br><span class="line">bytes, err := bufio.NewReader(r).Peek(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> unicode.UTF8</span><br><span class="line">&#125;</span><br><span class="line">e, _, _ := charset.DetermineEncoding(bytes, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的参数是resp.body,返回值即是编码格式。</p><h5 id="2、观察目标字段"><a href="#2、观察目标字段" class="headerlink" title="2、观察目标字段"></a>2、观察目标字段</h5><p>看一下需要获取的字段长什么样，Chrome浏览器查看，<img src="http://p83c9zj44.bkt.clouddn.com/%E7%BD%91%E5%9D%80%E6%BA%90%E7%A0%81%E6%A0%BC%E5%BC%8F.png" alt="目标字段源码"><br>在goland控制台打印，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dd&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;http://www.zhenai.com/zhenghun/eerduosi&quot;</span><br><span class="line">class=&quot;&quot;&gt;鄂尔多斯&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;http://www.zhenai.com/zhenghun/enshi&quot;</span><br><span class="line">class=&quot;&quot;&gt;恩施&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;http://www.zhenai.com/zhenghun/ezhou&quot;</span><br><span class="line">class=&quot;&quot;&gt;鄂州&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dd&gt;</span><br></pre></td></tr></table></figure><p>可以看到，目标字段是很简单的格式，很容易获取，每一个a标签就是一个目标字段，正则表达式为：<br><code>&lt;a href=&quot;(http://www.zhenai.com/zhenghun/[a-z0-9]+)&quot;[^&gt;]+&gt;([^&lt;]+)&lt;/a&gt;</code><br>该正则表达式中有两个()，第一个括号中为目标网址，第二个括号中为城市名。</p><h5 id="3、获取目标字段"><a href="#3、获取目标字段" class="headerlink" title="3、获取目标字段"></a>3、获取目标字段</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match := regexp.MustCompile(<span class="string">`&lt;a href="(http://www.zhenai.com/zhenghun/[a-z0-9]+)"[^&gt;]+&gt;([^&lt;]+)&lt;/a&gt;`</span>)</span><br><span class="line"></span><br><span class="line">bytes := match.FindAllSubmatch(allData, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>regexp.MustCompile用来在文本中查找匹配正则表达式的内容。<br>FindAllSubmatch方法的第2个参数表示查找次数，-1表示不限次数，查找多少次，就返回多少个字节数组；返回值是一个字节数组，里面有三个元素，是匹配到的结果，及其分组内容，返回值中的第 0 个元素是整个正则表达式的匹配结果，分组顺序按照“(”的出现次序而定，所以第 1 个元素是网址，第 2 个元素是城市名，接下来只需要遍历返回的字节数组，转化为字符串输出及得到最终结果。<br>最后，全部代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"golang.org/x/text/encoding"</span></span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"golang.org/x/net/html/charset"</span></span><br><span class="line"><span class="string">"golang.org/x/text/transform"</span></span><br><span class="line"><span class="string">"golang.org/x/text/encoding/simplifiedchinese"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cityListURL = <span class="string">"http://www.zhenai.com/zhenghun"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp, err := http.Get(cityListURL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err) <span class="comment">//如果err不为空,说明出现错误数据，Panic结束程序。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close() <span class="comment">//关闭数据解析请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != http.StatusOK &#123;</span><br><span class="line">fmt.Println(<span class="string">"Error:Status Code:"</span>, resp.StatusCode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">utf8Reader := transform.NewReader(resp.Body, simplifiedchinese.GBK.NewDecoder())</span><br><span class="line"><span class="comment">//e := determinEncoding(resp.Body)</span></span><br><span class="line"><span class="comment">//utf8Reader := transform.NewReader(resp.Body, e.NewDecoder())</span></span><br><span class="line"></span><br><span class="line">allData, err1 := ioutil.ReadAll(utf8Reader)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Println(string(allData))</span></span><br><span class="line"></span><br><span class="line">match := regexp.MustCompile(<span class="string">`&lt;a href="(http://www.zhenai.com/zhenghun/[a-z0-9]+)"[^&gt;]+&gt;([^&lt;]+)&lt;/a&gt;`</span>)</span><br><span class="line"></span><br><span class="line">bytes := match.FindAllSubmatch(allData, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> bytes &#123;</span><br><span class="line">fmt.Println(key+<span class="number">1</span>, <span class="string">"城市："</span>, <span class="keyword">string</span>(value[<span class="number">2</span>]), <span class="string">"网址："</span>, <span class="keyword">string</span>(value[<span class="number">1</span>]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">determinEncoding</span><span class="params">(r io.Reader)</span> <span class="title">encoding</span>.<span class="title">Encoding</span></span> &#123;</span><br><span class="line">bytes, err := bufio.NewReader(r).Peek(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">e, _, _ := charset.DetermineEncoding(bytes, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 城市： 阿坝 网址： http:<span class="comment">//www.zhenai.com/zhenghun/aba</span></span><br><span class="line"><span class="number">2</span> 城市： 阿克苏 网址： http:<span class="comment">//www.zhenai.com/zhenghun/akesu</span></span><br><span class="line">......</span><br><span class="line"><span class="number">468</span> 城市： 自贡 网址： http:<span class="comment">//www.zhenai.com/zhenghun/zigong</span></span><br><span class="line"><span class="number">469</span> 城市： 资阳 网址： http:<span class="comment">//www.zhenai.com/zhenghun/ziyang1</span></span><br><span class="line"><span class="number">470</span> 城市： 遵义 网址： http:<span class="comment">//www.zhenai.com/zhenghun/zunyi</span></span><br></pre></td></tr></table></figure><font color="#FF0000" size="5">版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信</font>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h5&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="go语言爬虫" scheme="http://yoursite.com/tags/go%E8%AF%AD%E8%A8%80%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>在一台电脑上搭建etcd服务器集群</title>
    <link href="http://yoursite.com/2017/12/31/%E5%9C%A8%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E4%B8%8A%E6%90%AD%E5%BB%BAetcd%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4/"/>
    <id>http://yoursite.com/2017/12/31/在一台电脑上搭建etcd服务器集群/</id>
    <published>2017-12-31T11:26:08.000Z</published>
    <updated>2018-07-28T10:44:19.173Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h5><a id="more"></a><h5 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h5><p>在同一台电脑上开启三个节点</p><blockquote><p>进入etcd/bin目录：<br><code>cd go/src/github.com/coreos/etcd/bin</code></p></blockquote><p><strong>节点1</strong><br>打开第一个终端，进入etcd/bin目录执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./etcd --name cd0 --initial-advertise-peer-urls http://127.0.0.1:2380 --listen-peer-urls http://127.0.0.1:2380 --listen-client-urls http://127.0.0.1:2379 --advertise-client-urls http://127.0.0.1:2379 --initial-cluster-token etcd-cluster-1 --initial-cluster cd0=http://127.0.0.1:2380,cd1=http://127.0.0.1:2480,cd2=http://127.0.0.1:2080 --initial-cluster-state new</span><br></pre></td></tr></table></figure><p><strong>节点2</strong><br>打开第二个终端，进入etcd/bin目录执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./etcd --name cd1 --initial-advertise-peer-urls http://127.0.0.1:2480 --listen-peer-urls http://127.0.0.1:2480 --listen-client-urls http://127.0.0.1:2479 --advertise-client-urls http://127.0.0.1:2479 --initial-cluster-token etcd-cluster-1 --initial-cluster cd0=http://127.0.0.1:2380,cd1=http://127.0.0.1:2480,cd2=http://127.0.0.1:2080 --initial-cluster-state new</span><br></pre></td></tr></table></figure><p><strong>节点3</strong><br>打开第三个终端，进入etcd/bin目录执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./etcd --name cd2 --initial-advertise-peer-urls http://127.0.0.1:2080 --listen-peer-urls http://127.0.0.1:2080 --listen-client-urls http://127.0.0.1:2079 --advertise-client-urls http://127.0.0.1:2079 --initial-cluster-token etcd-cluster-1 --initial-cluster cd0=http://127.0.0.1:2380,cd1=http://127.0.0.1:2480,cd2=http://127.0.0.1:2080 --initial-cluster-state new</span><br></pre></td></tr></table></figure><h2 id="查询-member-列表"><a href="#查询-member-列表" class="headerlink" title="查询 member 列表"></a>查询 member 列表</h2><p>新开一个终端，进入etcd/bin目录，执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ETCDCTL_API=3</span><br><span class="line">ENDPOINTS=127.0.0.1:2379,127.0.0.1:2479,127.0.0.1:2079</span><br><span class="line"></span><br><span class="line">./etcdctl --endpoints=$ENDPOINTS member list</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7a46237d7e589f81, started, cd2, http://127.0.0.1:2080, http://127.0.0.1:2079</span><br><span class="line">bf9071f4639c75cc, started, cd0, http://127.0.0.1:2380, http://127.0.0.1:2379</span><br><span class="line">e3ba87c3b4858ef1, started, cd1, http://127.0.0.1:2480, http://127.0.0.1:2479</span><br></pre></td></tr></table></figure><h2 id="在终端手动添加-member-节点"><a href="#在终端手动添加-member-节点" class="headerlink" title="在终端手动添加 member 节点"></a>在终端手动添加 member 节点</h2><p><strong>member add</strong> 添加节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./etcdctl --endpoints=$ENDPOINTS member add cd3 --peer-urls=http://127.0.0.1:2180</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ETCD_NAME=&quot;cd3&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER=&quot;cd2=http://127.0.0.1:2080,cd0=http://127.0.0.1:2380,cd3=http://127.0.0.1:2180,cd1=http://127.0.0.1:2480&quot;</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;http://127.0.0.1:2180&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=&quot;existing&quot;</span><br></pre></td></tr></table></figure><p><strong>查询 member 节点列表信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./etcdctl --endpoints=$ENDPOINTS member list</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7a46237d7e589f81, started, cd2, http://127.0.0.1:2080, http://127.0.0.1:2079</span><br><span class="line">bf9071f4639c75cc, started, cd0, http://127.0.0.1:2380, http://127.0.0.1:2379</span><br><span class="line">c886a1da995d65c1, unstarted, , http://127.0.0.1:2180, </span><br><span class="line">e3ba87c3b4858ef1, started, cd1, http://127.0.0.1:2480, http://127.0.0.1:2479</span><br></pre></td></tr></table></figure><p>通过查询结果可以发现：<code>http://127.0.0.1:2180</code> 显示状态为：<code>unstarted</code><br><img src="http://p83c9zj44.bkt.clouddn.com/etcd%E5%9B%BE1.jpeg" alt=""></p><p><strong>启动新节点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./etcd --name cd3 --listen-client-urls http://127.0.0.1:2179 --advertise-client-urls http://127.0.0.1:2179 --listen-peer-urls http://127.0.0.1:2180 --initial-advertise-peer-urls http://127.0.0.1:2180 --initial-cluster-state existing --initial-cluster cd2=http://127.0.0.1:2080,cd0=http://127.0.0.1:2380,cd3=http://127.0.0.1:2180,cd1=http://127.0.0.1:2480 --initial-cluster-token etcd-cluster-1</span><br></pre></td></tr></table></figure><p><img src="http://p83c9zj44.bkt.clouddn.com/etcd%E5%9B%BE2.jpeg" alt=""></p><p><strong>查询 member 节点列表信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./etcdctl --endpoints=$ENDPOINTS member list</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7a46237d7e589f81, started, cd2, http://127.0.0.1:2080, http://127.0.0.1:2079</span><br><span class="line">bf9071f4639c75cc, started, cd0, http://127.0.0.1:2380, http://127.0.0.1:2379</span><br><span class="line">c886a1da995d65c1, started, cd3, http://127.0.0.1:2180, http://127.0.0.1:2179</span><br><span class="line">e3ba87c3b4858ef1, started, cd1, http://127.0.0.1:2480, http://127.0.0.1:2479</span><br></pre></td></tr></table></figure><p><img src="http://p83c9zj44.bkt.clouddn.com/etcd%E5%9B%BE3.jpeg" alt=""></p><h2 id="代码实现-member-的管理"><a href="#代码实现-member-的管理" class="headerlink" title="代码实现 member 的管理"></a>代码实现 member 的管理</h2><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addMember</span><span class="params">(cli *clientv3.Client, peerURLs []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">////向系统中插入节点</span></span><br><span class="line">_, err := cli.MemberAdd(context.Background(), peerURLs)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"MemberAdd"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示刚才插入节点信息</span></span><br><span class="line">resp, err := cli.MemberList(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"MemberList"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"添加后的members为"</span>, resp.Members)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">dialTimeout    = <span class="number">5</span> * time.Second</span><br><span class="line">requestTimeout = <span class="number">2</span> * time.Second</span><br><span class="line">endpoints      = []<span class="keyword">string</span>&#123;<span class="string">"127.0.0.1:2379"</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在main函数中调用addMember，添加端口为2280的节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   endpoints,</span><br><span class="line">DialTimeout: dialTimeout,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"clientv3.New"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line">peerURLs := []<span class="keyword">string</span>&#123;<span class="string">"http://127.0.0.1:2280"</span>&#125;</span><br><span class="line">addMember(cli, peerURLs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goland控制台运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加后的members为 [ID:<span class="number">2468423305315244021</span> peerURLs:<span class="string">"http://127.0.0.1:2280"</span>  ID:<span class="number">8810768742894575489</span> name:<span class="string">"cd2"</span> peerURLs:<span class="string">"http://127.0.0.1:2080"</span> clientURLs:<span class="string">"http://127.0.0.1:2079"</span>  ID:<span class="number">13803658152347727308</span> name:<span class="string">"cd0"</span> peerURLs:<span class="string">"http://127.0.0.1:2380"</span> clientURLs:<span class="string">"http://127.0.0.1:2379"</span>  ID:<span class="number">14449414414712792513</span> name:<span class="string">"cd3"</span> peerURLs:<span class="string">"http://127.0.0.1:2180"</span> clientURLs:<span class="string">"http://127.0.0.1:2179"</span>  ID:<span class="number">16409577466894847729</span> name:<span class="string">"cd1"</span> peerURLs:<span class="string">"http://127.0.0.1:2480"</span> clientURLs:<span class="string">"http://127.0.0.1:2479"</span> ]</span><br></pre></td></tr></table></figure><p>etcd没有提供用代码启动节点的方法，因此，执行完添加节点，需要打开终端手动启动节点，启动节点之后，才能再次添加节点（即一次只能添加一个节点，不能连续添加）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./etcd --name cd4 --listen-client-urls http://127.0.0.1:2279 --advertise-client-urls http://127.0.0.1:2279 --listen-peer-urls http://127.0.0.1:2280 --initial-advertise-peer-urls http://127.0.0.1:2180 --initial-cluster-state existing --initial-cluster cd2=http://127.0.0.1:2080,cd4=http://127.0.0.1:2280,cd0=http://127.0.0.1:2380,cd3=http://127.0.0.1:2180,cd1=http://127.0.0.1:2480 --initial-cluster-token etcd-cluster-1</span><br></pre></td></tr></table></figure><p><img src="http://p83c9zj44.bkt.clouddn.com/etcd%E5%9B%BE4.jpeg" alt=""></p><p><strong>查询 member 节点列表信息</strong><br>新开一个终端，进入etcd/bin目录，不要导入API，直接查询member列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./etcdctl --endpoints=$ENDPOINTS member list</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">224199</span>eafc9c57f5: name=cd4 peerURLs=http:<span class="comment">//127.0.0.1:2280 clientURLs=http://127.0.0.1:2279 isLeader=false</span></span><br><span class="line"><span class="number">7</span>a46237d7e589f81: name=cd2 peerURLs=http:<span class="comment">//127.0.0.1:2080 clientURLs=http://127.0.0.1:2079 isLeader=false</span></span><br><span class="line">bf9071f4639c75cc: name=cd0 peerURLs=http:<span class="comment">//127.0.0.1:2380 clientURLs=http://127.0.0.1:2379 isLeader=true</span></span><br><span class="line">c886a1da995d65c1: name=cd3 peerURLs=http:<span class="comment">//127.0.0.1:2180 clientURLs=http://127.0.0.1:2179 isLeader=false</span></span><br><span class="line">e3ba87c3b4858ef1: name=cd1 peerURLs=http:<span class="comment">//127.0.0.1:2480 clientURLs=http://127.0.0.1:2479 isLeader=false</span></span><br></pre></td></tr></table></figure><p>启动后etcd/bin目录如图<br><img src="http://p83c9zj44.bkt.clouddn.com/etcd%E5%90%AF%E5%8A%A8cd4%E5%90%8E%E7%9A%84%E6%96%87%E4%BB%B6.jpeg" alt=""></p><h2 id="删除-member"><a href="#删除-member" class="headerlink" title="删除 member"></a>删除 member</h2><p>删除节点cd4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./etcdctl --endpoints=$ENDPOINTS member remove 224199eafc9c57f5</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Removed member 224199eafc9c57f5 from cluster</span><br></pre></td></tr></table></figure><p><strong>查询 member 节点列表信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./etcdctl --endpoints=$ENDPOINTS member list</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>a46237d7e589f81: name=cd2 peerURLs=http:<span class="comment">//127.0.0.1:2080 clientURLs=http://127.0.0.1:2079 isLeader=false</span></span><br><span class="line">bf9071f4639c75cc: name=cd0 peerURLs=http:<span class="comment">//127.0.0.1:2380 clientURLs=http://127.0.0.1:2379 isLeader=true</span></span><br><span class="line">c886a1da995d65c1: name=cd3 peerURLs=http:<span class="comment">//127.0.0.1:2180 clientURLs=http://127.0.0.1:2179 isLeader=false</span></span><br><span class="line">e3ba87c3b4858ef1: name=cd1 peerURLs=http:<span class="comment">//127.0.0.1:2480 clientURLs=http://127.0.0.1:2479 isLeader=false</span></span><br></pre></td></tr></table></figure><p><img src="http://p83c9zj44.bkt.clouddn.com/etcd%E5%9B%BE6.jpeg" alt=""><br><img src="http://p83c9zj44.bkt.clouddn.com/etcd%E5%9B%BE7.jpeg" alt=""><br>在Goland用程序删除节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">delMember</span><span class="params">(cli *clientv3.Client, memberId <span class="keyword">uint64</span>)</span></span> &#123;</span><br><span class="line">_, err := cli.MemberRemove(context.Background(), memberId)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"delMember"</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"删除节点%d成功\n"</span>, memberId)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在main函数中调用delMember，删除端口为2180的节点，即节点cd3</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   endpoints,</span><br><span class="line">DialTimeout: dialTimeout,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"clientv3.New"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法，14449414414712792513为Goland控制台输出的十进制ID</span></span><br><span class="line"><span class="comment">//delMember(cli, 14449414414712792513) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法，c886a1da995d65c1为终端输出的十六进制ID</span></span><br><span class="line">delMember(cli, <span class="keyword">uint64</span>(<span class="number">0xc886a1da995d</span>65c1)) <span class="comment">//2180，cd3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goland控制台运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除节点<span class="number">14449414414712792513</span>成功</span><br></pre></td></tr></table></figure><p><img src="http://p83c9zj44.bkt.clouddn.com/etcd%E5%9B%BE8.jpeg" alt=""></p><font color="#FF0000" size="5">版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信</font>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h5&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="单机模拟etcd服务器集群" scheme="http://yoursite.com/tags/%E5%8D%95%E6%9C%BA%E6%A8%A1%E6%8B%9Fetcd%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>go语言链表</title>
    <link href="http://yoursite.com/2017/12/27/go%E8%AF%AD%E8%A8%80%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2017/12/27/go语言链表/</id>
    <published>2017-12-27T14:13:00.000Z</published>
    <updated>2018-07-28T12:03:13.200Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h5><a id="more"></a><h5 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h5><h3 id="1、什么是链表："><a href="#1、什么是链表：" class="headerlink" title="1、什么是链表："></a>1、什么是链表：</h3><p>链表是一种数据存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列节点组成，节点可以在运行时动态生成。<br>每个节点包括两个部分</p><blockquote><p>存储数据元素的数据域<br>存储下一个节点地址的地址域</p></blockquote><h3 id="2、链表与数组的区别："><a href="#2、链表与数组的区别：" class="headerlink" title="2、链表与数组的区别："></a>2、链表与数组的区别：</h3><blockquote><p>数组长度固定，链表长度不固定<br>数组的内存地址是连续的，链表的内存地址是不连续的<br>数组可以随机读取，链表不可以随机读取<br>数组内存空间开销比链表小，因为链表增加了地址域</p></blockquote><h3 id="3、链表结构："><a href="#3、链表结构：" class="headerlink" title="3、链表结构："></a>3、链表结构：</h3><blockquote><p>数据域<br>地址域<br>第一个节点称为头节点，最后一个节点称为尾节点</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//数据域</span></span><br><span class="line">Data <span class="keyword">string</span></span><br><span class="line"><span class="comment">//地址域</span></span><br><span class="line">NextNode *Node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//声明全局变量，保存头节点和当前节点</p><p><code>var head *Node</code>    //头节点<br><code>var curr *Node</code>    //当前节点、最新节点</p><p>创建头节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateHeadNode</span><span class="params">(data <span class="keyword">string</span>)</span> *<span class="title">Node</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> node = <span class="built_in">new</span>(Node)</span><br><span class="line">node.Data = data</span><br><span class="line">node.NextNode = <span class="literal">nil</span></span><br><span class="line"><span class="comment">//保存头节点</span></span><br><span class="line">head = node</span><br><span class="line"><span class="comment">//保存当前节点</span></span><br><span class="line">curr = node</span><br><span class="line"><span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddNode</span><span class="params">(data <span class="keyword">string</span>)</span> *<span class="title">Node</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> newNode = <span class="built_in">new</span>(Node)</span><br><span class="line">newNode.Data = data</span><br><span class="line">newNode.NextNode = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//挂接节点，当前节点的后节点为新节点</span></span><br><span class="line">curr.NextNode = newNode</span><br><span class="line"><span class="comment">//更新当前节点</span></span><br><span class="line">curr = newNode</span><br><span class="line"><span class="keyword">return</span> newNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历链表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShowNodes</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"------------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"遍历节点："</span>)</span><br><span class="line"><span class="keyword">var</span> node = head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//若遍历到某个节点，它的后节点为nil，则该节点为最后一个节点，则跳出循环</span></span><br><span class="line"><span class="keyword">if</span> node.NextNode == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(node.Data, <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(node.Data)</span><br><span class="line">node = node.NextNode</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计节点个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NodeCount</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> node = head</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">count++</span><br><span class="line"><span class="keyword">if</span> node.NextNode == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//到最后一个节点的时候，跳出循环</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">node = node.NextNode</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fmt.Println("总共有", count, "个节点。")</span></span><br><span class="line"><span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在指定位置插入节点：</p><blockquote><p>如果index为0，则插入的节点为头节点；<br>如果index大于当前节点总数，则插入的节点为尾节点，直接调用AddNode()方法即可；<br>如果index既不为0，又大于当前节点的index，则属于在两个节点中间插入节点，需要先找到index-1这个目标节点，再将找到的该目标节点的后一个节点指向新添加的节点的后节点，再将目标节点的后节点指向新添加的节点。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InsertNodeByIndex</span><span class="params">(index <span class="keyword">int</span>, data <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">var</span> node = <span class="built_in">new</span>(Node)</span><br><span class="line">node.Data = data</span><br><span class="line">node.NextNode = head</span><br><span class="line">head = node</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> index &gt; NodeCount()<span class="number">-1</span> &#123;</span><br><span class="line">AddNode(data)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> n = head</span><br><span class="line"><span class="comment">//找到目标节点，即index-1节点</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index<span class="number">-1</span>; i++ &#123;</span><br><span class="line">n = n.NextNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newNode = <span class="built_in">new</span>(Node)</span><br><span class="line">newNode.Data = data</span><br><span class="line"><span class="comment">//将新节点的后节点指向目标节点的后节点</span></span><br><span class="line">newNode.NextNode = n.NextNode</span><br><span class="line"><span class="comment">//目标节点的后节点指向新节点</span></span><br><span class="line">n.NextNode = newNode</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改指定节点的内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateNodeByIndex</span><span class="params">(index <span class="keyword">int</span>, data <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> node = head</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">head.Data = data</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index; i++ &#123;</span><br><span class="line">node = node.NextNode</span><br><span class="line">&#125;</span><br><span class="line">node.Data = data</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除指定节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeleteNodeByIndex</span><span class="params">(index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> node = head</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">head = node.NextNode</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index<span class="number">-1</span>; i++ &#123;</span><br><span class="line">node = node.NextNode</span><br><span class="line">&#125;</span><br><span class="line">node.NextNode = node.NextNode.NextNode</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是最简单的链表形式，实际中链表还分为单向链表，双向链表，循环链表，并且链表存储的数据可以是多种类型。而更新节点，删除、插入节点也要考虑更多方面。这里只是简单介绍一下。</p><font color="#FF0000" size="5">版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信</font>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h5&gt;
    
    </summary>
    
      <category term="go语言" scheme="http://yoursite.com/categories/go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的GO语言实现</title>
    <link href="http://yoursite.com/2017/12/13/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84GO%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/12/13/二叉树的GO语言实现/</id>
    <published>2017-12-13T12:40:00.000Z</published>
    <updated>2018-08-10T07:48:54.585Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h5><a id="more"></a><h5 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h5><h1 id="二叉树的GO语言实现"><a href="#二叉树的GO语言实现" class="headerlink" title="二叉树的GO语言实现"></a>二叉树的GO语言实现</h1><p>相关函数与方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Insert()插入节点</span><br><span class="line">Max()找出最大值</span><br><span class="line">Min()找出最小值</span><br><span class="line">String()格式化输出</span><br><span class="line">Search()搜索某个值是否存在</span><br><span class="line">Remove()删除节点</span><br><span class="line">PreOrderTraverse()前序遍历</span><br><span class="line">InOrderTraverse()中序遍历</span><br><span class="line">PostOrderTraverse()后序遍历</span><br><span class="line">breadthFirstTraverse()广度优先遍历</span><br><span class="line">getCount()统计节点个数</span><br><span class="line">GetLeafCount()统计叶子节点个数</span><br><span class="line">GetDepth()二叉树的深度</span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点的结构</span></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">key   <span class="keyword">int</span></span><br><span class="line">value Item</span><br><span class="line">Left  *Node</span><br><span class="line">Right *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树的结构</span></span><br><span class="line"><span class="keyword">type</span> BinarySearchTree <span class="keyword">struct</span> &#123;</span><br><span class="line">root *Node</span><br><span class="line">lock sync.RWMutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tree *BinarySearchTree)</span> <span class="title">Insert</span><span class="params">(key <span class="keyword">int</span>, value Item)</span></span> &#123;</span><br><span class="line">tree.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> tree.lock.Unlock()</span><br><span class="line">node := &amp;Node&#123;key, value, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line"><span class="keyword">if</span> tree.root == <span class="literal">nil</span> &#123;</span><br><span class="line">tree.root = node</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">insertNode(tree.root, node)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertNode</span><span class="params">(node, newNode *Node)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> newNode.key &lt; node.key &#123;</span><br><span class="line"><span class="keyword">if</span> node.Left == <span class="literal">nil</span> &#123;</span><br><span class="line">node.Left = newNode</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">insertNode(node.Left, newNode)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> node.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">node.Right = newNode</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">insertNode(node.Right, newNode)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找出最大节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tree *BinarySearchTree)</span> <span class="title">Max</span><span class="params">()</span> *<span class="title">Item</span></span> &#123;</span><br><span class="line">tree.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> tree.lock.Unlock()</span><br><span class="line">node := tree.root</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> node.Right == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;node.value</span><br><span class="line">&#125;</span><br><span class="line">node = node.Right</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最小节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tree *BinarySearchTree)</span> <span class="title">Min</span><span class="params">()</span> *<span class="title">Item</span></span> &#123;</span><br><span class="line">tree.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> tree.lock.Unlock()</span><br><span class="line">node := tree.root</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> node.Left == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;node.value</span><br><span class="line">&#125;</span><br><span class="line">node = node.Left</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化输出二叉树</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tree *BinarySearchTree)</span> <span class="title">String</span><span class="params">()</span></span> &#123;</span><br><span class="line">tree.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> tree.lock.Unlock()</span><br><span class="line">fmt.Println(<span class="string">"-----------------------------"</span>)</span><br><span class="line">stringify(tree.root, <span class="number">0</span>)</span><br><span class="line">fmt.Println(<span class="string">"-----------------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringify</span><span class="params">(node *Node, level <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">format := <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; level; i++ &#123;</span><br><span class="line">format += <span class="string">"      "</span></span><br><span class="line">&#125;</span><br><span class="line">format += <span class="string">"---[ "</span></span><br><span class="line">level++</span><br><span class="line"></span><br><span class="line">stringify(node.Right, level)</span><br><span class="line">fmt.Printf(format+<span class="string">"%d\n"</span>, node.key)</span><br><span class="line">stringify(node.Left, level)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找是否存在某个节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tree *BinarySearchTree)</span> <span class="title">Search</span><span class="params">(key <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">tree.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> tree.lock.Unlock()</span><br><span class="line">fmt.Print(<span class="string">"是否存在节点"</span>, key, <span class="string">"："</span>)</span><br><span class="line"><span class="keyword">return</span> search(tree.root, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(node *Node, key <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> key &lt; node.key &#123;</span><br><span class="line"><span class="keyword">return</span> search(node.Left, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> key &gt; node.key &#123;</span><br><span class="line"><span class="keyword">return</span> search(node.Right, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tree *BinarySearchTree)</span> <span class="title">Remove</span><span class="params">(key <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">tree.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> tree.lock.Unlock()</span><br><span class="line">fmt.Println(<span class="string">"删除节点："</span>, key)</span><br><span class="line">remove(tree.root, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(node *Node, key <span class="keyword">int</span>)</span> *<span class="title">Node</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> key &lt; node.key &#123;</span><br><span class="line">node.Left = remove(node.Left, key)</span><br><span class="line"><span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> key &gt; node.key &#123;</span><br><span class="line">node.Right = remove(node.Right, key)</span><br><span class="line"><span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> node.Left == <span class="literal">nil</span> &amp;&amp; node.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">node = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> node.Left == <span class="literal">nil</span> &#123;</span><br><span class="line">node = node.Right</span><br><span class="line"><span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> node.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">node = node.Left</span><br><span class="line"><span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mostRightNode := node.Left</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> mostRightNode != <span class="literal">nil</span> &amp;&amp; mostRightNode.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">mostRightNode = mostRightNode.Right</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.key, node.value = mostRightNode.key, mostRightNode.value</span><br><span class="line">node.Left = remove(node.Left, node.key)</span><br><span class="line"><span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深度优先遍历：前序遍历，中序遍历，后序遍历是深度优先遍历的三种形式。<br>前序遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tree *BinarySearchTree)</span> <span class="title">PreOrderTraverse</span><span class="params">()</span></span> &#123;</span><br><span class="line">tree.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> tree.lock.Unlock()</span><br><span class="line">fmt.Println(<span class="string">"前序遍历："</span>)</span><br><span class="line">node := tree.root</span><br><span class="line">preOrder(node)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preOrder</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(node.value, <span class="string">"\t"</span>)</span><br><span class="line">preOrder(node.Left)</span><br><span class="line">preOrder(node.Right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tree *BinarySearchTree)</span> <span class="title">InOrderTraverse</span><span class="params">()</span></span> &#123;</span><br><span class="line">tree.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> tree.lock.Unlock()</span><br><span class="line">fmt.Println(<span class="string">"中序遍历："</span>)</span><br><span class="line">node := tree.root</span><br><span class="line">inOrder(node)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">inOrder(node.Left)</span><br><span class="line">fmt.Print(node.value, <span class="string">"\t"</span>)</span><br><span class="line">inOrder(node.Right)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后序遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tree *BinarySearchTree)</span> <span class="title">PostOrderTraverse</span><span class="params">()</span></span> &#123;</span><br><span class="line">tree.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> tree.lock.Unlock()</span><br><span class="line">fmt.Println(<span class="string">"后序遍历："</span>)</span><br><span class="line">node := tree.root</span><br><span class="line">postOrder(node)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postOrder</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">postOrder(node.Left)</span><br><span class="line">postOrder(node.Right)</span><br><span class="line">fmt.Print(node.value, <span class="string">"\t"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>广度优先遍历：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tree *BinarySearchTree)</span> <span class="title">breadthFirstTraverse</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"广度优先遍历："</span>)</span><br><span class="line"><span class="keyword">var</span> result []Item</span><br><span class="line"><span class="keyword">var</span> nodes = []Node&#123;*node&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(nodes) &gt; <span class="number">0</span> &#123;</span><br><span class="line">node := nodes[<span class="number">0</span>]</span><br><span class="line">nodes = nodes[<span class="number">1</span>:]</span><br><span class="line">result = <span class="built_in">append</span>(result, node.value)</span><br><span class="line"><span class="keyword">if</span> node.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">nodes = <span class="built_in">append</span>(nodes, *node.Left)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> node.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">nodes = <span class="built_in">append</span>(nodes, *node.Right)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计节点的个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getCount</span><span class="params">(node *Node)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getCount(node.Left) + getCount(node.Right) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计叶子节点的个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetLeafCount</span><span class="params">(node *Node)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> node.Left == <span class="literal">nil</span> &amp;&amp; node.Right == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">sum += GetLeafCount(node.Left)</span><br><span class="line">sum += GetLeafCount(node.Right)</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉树的深度</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDepth</span><span class="params">(node *Node)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max(GetDepth(node.Left), GetDepth(node.Right)) + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------</span><br><span class="line">            ---[ <span class="number">16</span></span><br><span class="line">                  ---[ <span class="number">14</span></span><br><span class="line">      ---[ <span class="number">13</span></span><br><span class="line">                  ---[ <span class="number">12</span></span><br><span class="line">            ---[ <span class="number">10</span></span><br><span class="line">                  ---[ <span class="number">9</span></span><br><span class="line">---[ <span class="number">8</span></span><br><span class="line">                  ---[ <span class="number">7</span></span><br><span class="line">            ---[ <span class="number">6</span></span><br><span class="line">                  ---[ <span class="number">5</span></span><br><span class="line">      ---[ <span class="number">4</span></span><br><span class="line">                  ---[ <span class="number">3</span></span><br><span class="line">            ---[ <span class="number">2</span></span><br><span class="line">                  ---[ <span class="number">1</span></span><br><span class="line">                        ---[ <span class="number">0</span></span><br><span class="line">-----------------------------</span><br><span class="line">最大值是： <span class="number">16</span></span><br><span class="line">最小值是： <span class="number">0</span></span><br><span class="line">是否存在节点<span class="number">11</span>：<span class="literal">false</span></span><br><span class="line">删除节点： <span class="number">8</span></span><br><span class="line">-----------------------------</span><br><span class="line">            ---[ <span class="number">16</span></span><br><span class="line">                  ---[ <span class="number">14</span></span><br><span class="line">      ---[ <span class="number">13</span></span><br><span class="line">                  ---[ <span class="number">12</span></span><br><span class="line">            ---[ <span class="number">10</span></span><br><span class="line">                  ---[ <span class="number">9</span></span><br><span class="line">---[ <span class="number">7</span></span><br><span class="line">            ---[ <span class="number">6</span></span><br><span class="line">                  ---[ <span class="number">5</span></span><br><span class="line">      ---[ <span class="number">4</span></span><br><span class="line">                  ---[ <span class="number">3</span></span><br><span class="line">            ---[ <span class="number">2</span></span><br><span class="line">                  ---[ <span class="number">1</span></span><br><span class="line">                        ---[ <span class="number">0</span></span><br><span class="line">-----------------------------</span><br><span class="line">前序遍历：</span><br><span class="line"><span class="number">7</span><span class="number">4</span><span class="number">2</span><span class="number">1</span><span class="number">0</span><span class="number">3</span><span class="number">6</span><span class="number">5</span><span class="number">13</span><span class="number">10</span><span class="number">9</span><span class="number">12</span><span class="number">16</span><span class="number">14</span></span><br><span class="line">中序遍历：</span><br><span class="line"><span class="number">0</span><span class="number">1</span><span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">6</span><span class="number">7</span><span class="number">9</span><span class="number">10</span><span class="number">12</span><span class="number">13</span><span class="number">14</span><span class="number">16</span></span><br><span class="line">后序遍历：</span><br><span class="line"><span class="number">0</span><span class="number">1</span><span class="number">3</span><span class="number">2</span><span class="number">5</span><span class="number">6</span><span class="number">4</span><span class="number">9</span><span class="number">12</span><span class="number">10</span><span class="number">14</span><span class="number">16</span><span class="number">13</span><span class="number">7</span></span><br><span class="line"></span><br><span class="line">共有 <span class="number">14</span> 个节点。</span><br><span class="line">叶子节点的个数为： <span class="number">6</span></span><br><span class="line">二叉树的深度为： <span class="number">5</span></span><br><span class="line">广度优先遍历：</span><br><span class="line">[<span class="number">7</span> <span class="number">4</span> <span class="number">13</span> <span class="number">2</span> <span class="number">6</span> <span class="number">10</span> <span class="number">16</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">9</span> <span class="number">12</span> <span class="number">14</span> <span class="number">0</span>]</span><br></pre></td></tr></table></figure><font color="#FF0000" size="5">版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信</font>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h5&gt;
    
    </summary>
    
      <category term="go语言" scheme="http://yoursite.com/categories/go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>用go语言简单实现SHA256哈希算法</title>
    <link href="http://yoursite.com/2017/12/01/%E7%94%A8go%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0SHA256%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/12/01/用go语言简单实现SHA256哈希算法/</id>
    <published>2017-12-01T15:36:20.000Z</published>
    <updated>2018-07-28T10:49:15.518Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h5><a id="more"></a><h5 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h5><h6 id="用go语言简单实现SHA256哈希算法："><a href="#用go语言简单实现SHA256哈希算法：" class="headerlink" title="用go语言简单实现SHA256哈希算法："></a>用go语言简单实现SHA256哈希算法：</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"crypto/sha256"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">string</span> := <span class="string">"Hello"</span>  <span class="comment">//需要哈希的字符串内容</span></span><br><span class="line"></span><br><span class="line">hash := sha256.New()   <span class="comment">//声明sha256哈希函数</span></span><br><span class="line">hash.Write([]<span class="keyword">byte</span>(<span class="keyword">string</span>))</span><br><span class="line">bs := hash.Sum(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%x"</span>, bs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h5><p>185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969<br>其中，hash.Write()写入需要生成哈希的内容，h.Sum()添加额外的[]byte到当前的哈希中。</p><h5 id="生成符合某一条件的哈希："><a href="#生成符合某一条件的哈希：" class="headerlink" title="生成符合某一条件的哈希："></a>生成符合某一条件的哈希：</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"crypto/sha256"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isvhd</span><span class="params">(hash <span class="keyword">string</span>, diff <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>(hash); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> hash[i] != <span class="string">'8'</span> &#123;   <span class="comment">//哈希字符串的前diff个字符是否为8，如果不为8，结束循环。</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i &gt;= diff</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">nonce := <span class="number">0</span></span><br><span class="line">hash := <span class="string">""</span></span><br><span class="line"></span><br><span class="line">shaobj := sha256.New()</span><br><span class="line"></span><br><span class="line">prehash := <span class="string">"0000fedaa499741317a18f1ad626f933776ad24822cb422634978bfe8005c94b"</span></span><br><span class="line"><span class="comment">//prehash := "185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969"</span></span><br><span class="line">count := <span class="number">0</span>     <span class="comment">//循环的次数</span></span><br><span class="line"><span class="keyword">for</span> !isvhd(hash, <span class="number">4</span>) &#123;</span><br><span class="line">nonce++</span><br><span class="line">input := <span class="string">"100"</span> + prehash + <span class="string">"Thu, 26 Apr 2018 03:30:54 GMT"</span> + <span class="string">"A -&gt; B 1000"</span> + <span class="keyword">string</span>(nonce)</span><br><span class="line">shaobj.Write([]<span class="keyword">byte</span>(input))</span><br><span class="line">hash = fmt.Sprintf(<span class="string">"%x"</span>, shaobj.Sum(<span class="literal">nil</span>))</span><br><span class="line">fmt.Println(hash)</span><br><span class="line">count++</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"count:"</span>, count)</span><br><span class="line">fmt.Println(<span class="string">"nonce:"</span>, nonce)</span><br><span class="line">fmt.Println(hash)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(hash))     <span class="comment">//哈希字符串的长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果：-1"><a href="#运行结果：-1" class="headerlink" title="运行结果："></a>运行结果：</h5><p>············<br>0c7d465c78faf8dcc359343df18d535497b6dee228577f84b236e908193c6522<br>8888448863c33dff9acdc99dc6b85ca3329716c4d6fa3f51a540e2b977347ac6<br>count: 11743<br>nonce: 11743<br>8888448863c33dff9acdc99dc6b85ca3329716c4d6fa3f51a540e2b977347ac6<br>64</p><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>isvhd（）函数用来判断生成的哈希内容是否满足某一条件，此处为判断生成的哈希数，前4位数是否为8。若不满足这一条件，则给nonce加1，再次生成哈希，直到生成一个前4位数均为8的哈希，结束循环。<br>生成了一个前四位数为8的哈希，哈希字符串长度为64，循环了11743次。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h5&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="sha256哈希算法" scheme="http://yoursite.com/tags/sha256%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>mac下生成RSA私钥和公钥</title>
    <link href="http://yoursite.com/2017/11/30/mac%E4%B8%8B%E7%94%9F%E6%88%90rsa%E7%A7%81%E9%92%A5%E5%92%8C%E5%85%AC%E9%92%A5/"/>
    <id>http://yoursite.com/2017/11/30/mac下生成rsa私钥和公钥/</id>
    <published>2017-11-30T13:26:05.000Z</published>
    <updated>2018-07-28T10:41:32.270Z</updated>
    
    <content type="html"><![CDATA[<h3 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h3><a id="more"></a><h3 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h3><h3 id="第一种方式（执行第2步之后，需要输入两次开机密码）："><a href="#第一种方式（执行第2步之后，需要输入两次开机密码）：" class="headerlink" title="第一种方式（执行第2步之后，需要输入两次开机密码）："></a>第一种方式（执行第2步之后，需要输入两次开机密码）：</h3><p>打开终端：输入：openssl<br>依次输入命令：<br><strong>1、制作私钥</strong><br>genrsa -out rsa_private_key.pem 2048<br><strong>2、设置私钥为PKCS8格式</strong><br>pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM</p><font color="#FF0000" size="5"><strong>注意：</strong>执行完第2步，终端会输出以—–BEGIN ENCRYPTED PRIVATE KEY—–开头，以—–END ENCRYPTED PRIVATE KEY—–结尾的私钥，不是<strong>RSA</strong>私钥：<img src="http://p83c9zj44.bkt.clouddn.com/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E7%9A%84%E7%A7%81%E9%92%A5.jpeg" alt="">记住不要用此私钥，可以把这里的私钥保存一下，查看其长度，为1784。</font><br>此时，/Users/（用户名）目录下也有了名为rsa_private_key.pem的私钥文件，可用记事本查看一下，<img src="http://p83c9zj44.bkt.clouddn.com/%E5%9C%A8%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%8B%E7%94%9F%E6%88%90%E7%9A%84%E7%A7%81%E9%92%A5%EF%BC%88%E8%AE%B0%E4%BA%8B%E6%9C%AC%E6%89%93%E5%BC%80%EF%BC%89.jpeg" alt=""><br><font color="red" size="5" face="黑体">是以—–BEGIN RSA PRIVATE KEY—–开头，以—–END RSA PRIVATE KEY—–结尾。这才是<strong>RSA</strong>私钥。</font><br><strong>3、通过私钥产生公钥</strong><br>rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem<br><br>执行完第三步<br>/Users/（用户名）<br>目录下就已经有了两个文件：<br>rsa_private_key.pem<br>rsa_public_key.pem<br>前者为私钥，后者为公钥。<br>此时可以用记事本打开文件，公钥长度为450，私钥长度为1678，<font color="gree">私钥与刚才控制台输出的私钥不一样</font><br>也可以用命令行在终端查看秘钥：cat /Users/charlienike/rsa_private_key.pem<br>### 第二种方式（不需要输密码）：<br>打开终端：输入 openssl<br>依次输入命令：<br>1、genrsa -out rsa_private_key.pem 2048<br>2、pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM –nocrypt<br>3、rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem<br>命令执行过程中控制台不会输出私钥<img src="http://p83c9zj44.bkt.clouddn.com/%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%96%B9%E5%BC%8F%E7%94%9F%E6%88%90%E7%A7%98%E9%92%A5.jpeg" alt=""><br>最后/Users/(用户名)目录下会生成两个文件，一个公钥，一个私钥，用记事本打开（或者用终端：cat 文件路径），公钥长度为450，私钥长度为1674。<br><font color="gree">私钥的长度与第一种方式生成的私钥不一样长（1678、1674）。</font><p><strong>注意：RSA</strong>私钥是以—–BEGIN RSA PRIVATE KEY—–开头，以—–END RSA PRIVATE KEY—–结尾，公钥是以—–BEGIN PUBLIC KEY—–开头，以—–END PUBLIC KEY—–结尾，第一种方式执行过程中终端输出的并不是<strong>RSA</strong>私钥。<br>两种方式的不同是第二种方式的第2条命令后面多了个<font color="gree">–nocrypt</font>，第二种方式执行过程中不会输出私钥，也不需要输入密码，因此推荐使用第二种方式，以避免混淆。</p><p>同理：如果要生成1024字节的秘钥，只需要将第1行命令最后的2048改成1024即可：<br>rsa_private_key.pem 1024<br>同样推荐使用第二种方式，因为不需要输密码，且不易混淆。若使用第一种方式，过程中终端输出的私钥同样不是以—–BEGIN RSA PRIVATE KEY—–开头，不是RSA私钥，长度为992。正确的秘钥，即在用户名目录下生成的两个秘钥文件，私钥长度为886，公钥长度为271。</p><font color="#FF0000" size="5">版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信</font>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h3&gt;
    
    </summary>
    
      <category term="密码学" scheme="http://yoursite.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="RSA秘钥" scheme="http://yoursite.com/tags/RSA%E7%A7%98%E9%92%A5/"/>
    
  </entry>
  
  <entry>
    <title>快速排序算法</title>
    <link href="http://yoursite.com/2017/11/28/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/28/快速排序算法/</id>
    <published>2017-11-28T14:19:00.000Z</published>
    <updated>2018-08-04T01:46:00.894Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h5><a id="more"></a><h5 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h5><h1 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h1><p>目前世界上一般情况下最好的算法是“快速排序算法”，该算法由英国计算机科学家托尼·霍尔于1961年发表，是迄今为止世界计算机产业中使用最多的排序算法。</p><h4 id="什么是快速排序："><a href="#什么是快速排序：" class="headerlink" title="什么是快速排序："></a>什么是快速排序：</h4><p>快速排序强调少做事情，其原理大致如下：</p><ol><li>首先，对一个无序数组，从中随机挑选一个，比如是68，这个被随机选中的数字被称为枢值，之后，把数组中的所有数字分成两部分，第一部分是大于等于68的，第二部分是小于68的。在第一部完成之后，无序数组就变得稍微有序一点了。</li><li>第二步，将上面得到的两个数组，分别采用第一步的方法各自再找一个枢值。对于第一部分数字，由于所有的数字都大于或等于68，因此，第二次随机挑选的枢值肯定是一个大于68的数字，比如79；类似的，对于第二部分由于所有数字都小于68，因此第二次随机挑选的枢值肯定小于它，比如15。接下来，再把两堆数字各自分成大于等于相应枢值的数组，以及小于枢值的数组。这样做下来，原来的一个数组就变成了四个小的数组，他们分别是小于15的数字，介于15到68之间的数字，介于68到79之间的数字，以及大于79的数字。</li><li>再接下来，用同样的方法，四组变八组，八组变十六组，很快所有的数字就排好序列了。<h4 id="快速排序与其他排序："><a href="#快速排序与其他排序：" class="headerlink" title="快速排序与其他排序："></a>快速排序与其他排序：</h4>快速排序通常情况下复杂度是N乘以log(N)，和归并排序相同。根据计算机科学的标准，它们同样好，不过在工程上，快速排序一般比归并排序块两倍，因此在工程上还是有意义的，这也是很多人用快速排序的原因。<br>快速排序比归并排序快一些，可以在计算机科学上证明，这里打个比方，比较一下：<br>假如有一个学区，里面有20000名高中生，如果让大家到一个超级大的学校上大课，从里面跳出学生中的尖子，效率一定不高。这就是冒泡排序，每个人都要和所有人比较。<br>如果把这20000人放到10所学校中，每所学校都只有两千人，从各个学校各自跳出尖子生，再进行比较，效率就高的多了。这就是归并排序。<br>如果先划出几个分数线，根据个人成绩的高低把20000名学生分到10所学校，第一所学校的学生成绩最好，第十所最差，再找出尖子生，那就容易多了，工作量最小。这就是快速排序，所以快速排序比归并排序要快。</li></ol><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := []<span class="keyword">int</span>&#123;<span class="number">12</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">4</span>, <span class="number">22</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">6</span>&#125;</span><br><span class="line">quickSort(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSort</span><span class="params">(arr []<span class="keyword">int</span>, left, right <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">i := left</span><br><span class="line">j := right</span><br><span class="line">temp := arr[left]  <span class="comment">//枢值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i != j &#123;</span><br><span class="line"><span class="keyword">for</span> arr[j] &gt;= temp &amp;&amp; i &lt; j &#123;</span><br><span class="line"><span class="comment">//从最后一个数开始，直到找到小于枢值的数，停止循环</span></span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> arr[i] &lt;= temp &amp;&amp; i &lt; j &#123;</span><br><span class="line"><span class="comment">//从第一个数开始，直到找到大于枢值的数，停止循环</span></span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i &lt; j &#123;</span><br><span class="line">arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后，当i等于j的时候，i之前（包括i）是小于枢值的数字，i之后是大于枢值的数字，所以，将枢值与下标为i的数字互换，之后，分别处理枢值两边的数。</span></span><br><span class="line">arr[i], arr[left] = temp, arr[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归处理枢值左边未处理的</span></span><br><span class="line"><span class="keyword">if</span> left &lt; i<span class="number">-1</span> &#123;</span><br><span class="line">quickSort(arr, left, i<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归处理枢值右边未处理的</span></span><br><span class="line"><span class="keyword">if</span> i != <span class="built_in">len</span>(arr)<span class="number">-1</span> &amp;&amp; i+<span class="number">1</span> &lt; right &#123;</span><br><span class="line">quickSort(arr, i+<span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span> <span class="number">8</span> <span class="number">9</span> <span class="number">11</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">13</span> <span class="number">18</span> <span class="number">22</span> <span class="number">24</span>]</span><br></pre></td></tr></table></figure><p>快速排序通常是最好的算法，但是，在极端情况下，其复杂度是N的平方，和冒泡排序一样糟糕。而归并排序即使是在最坏的情况下，也能保证N乘以log(N)的复杂度。所以，并没有绝对最好的算法。</p><font color="#FF0000" size="5">版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信</font>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h5&gt;
    
    </summary>
    
      <category term="go语言" scheme="http://yoursite.com/categories/go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="快速排序" scheme="http://yoursite.com/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mac配置环境变量</title>
    <link href="http://yoursite.com/2017/03/26/Mac%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2017/03/26/Mac配置环境变量/</id>
    <published>2017-03-26T10:58:09.000Z</published>
    <updated>2018-07-28T10:43:34.918Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整理：房玉辉"><a href="#整理：房玉辉" class="headerlink" title="整理：房玉辉"></a>整理：房玉辉</h5><a id="more"></a><h5 id="博客：https-ElonJelinek-github-io"><a href="#博客：https-ElonJelinek-github-io" class="headerlink" title="博客：https://ElonJelinek.github.io"></a>博客：<a href="https://ElonJelinek.github.io" target="_blank" rel="noopener">https://ElonJelinek.github.io</a></h5><h6 id="1、找到-bash-profile文件"><a href="#1、找到-bash-profile文件" class="headerlink" title="1、找到.bash_profile文件"></a>1、找到<strong>.bash_profile</strong>文件</h6><p>Mac上的环境变量都在隐藏文件<strong>.bash_profile</strong>里配置，该文件一般都在Mac的用户名目录下，打开访达，进入到用户名目录，按<strong><code>shift+command+•</code></strong>，就可以看见用户名目录下的所有文件（包括隐藏文件），如图，我的用户名为<strong>CharlieNike</strong><img src="http://p83c9zj44.bkt.clouddn.com/hjbl%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6.jpeg" alt=""><br>第三个文件<strong>.bash_profile</strong>就是Mac的配置环境变量的文件；或者打开终端，输入：<strong><code>ls -a</code></strong>，就可以看见用户名目录下的所有文件和文件夹（包括隐藏的）；如果用户名目录下没有该文件，说明之前未配置过环境变量，该文件不存在，就打开终端，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure><p>创建<strong>.bash_profile</strong>文件。</p><h6 id="2、编辑-bash-profile文件"><a href="#2、编辑-bash-profile文件" class="headerlink" title="2、编辑.bash_profile文件"></a>2、编辑.bash_profile文件</h6><p>有了该文件之后，可用记事本打开，进行编辑；或者在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -e .bash_profile</span><br></pre></td></tr></table></figure><p>就可以调用记事本打开该文件，编辑完成后，保存退出。<br>例如，我的golang的环境变量如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=/Users/charlienike/go</span><br><span class="line">export PATH=/Users/charlienike/bin:$GOPATH/bin:$PATH</span><br></pre></td></tr></table></figure><h6 id="3、使配置生效"><a href="#3、使配置生效" class="headerlink" title="3、使配置生效"></a>3、使配置生效</h6><p>编辑完成后，在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><p>才能使刚刚配置的环境变量生效。<br><img src="http://p83c9zj44.bkt.clouddn.com/hjblopenebash.jpeg" alt=""></p><font color="#FF0000" size="5">版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信</font>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;整理：房玉辉&quot;&gt;&lt;a href=&quot;#整理：房玉辉&quot; class=&quot;headerlink&quot; title=&quot;整理：房玉辉&quot;&gt;&lt;/a&gt;整理：房玉辉&lt;/h5&gt;
    
    </summary>
    
      <category term="Mac操作" scheme="http://yoursite.com/categories/Mac%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="环境变量" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
</feed>
