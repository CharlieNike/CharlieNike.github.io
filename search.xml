<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[在本地网络部署super—dictionary智能合约]]></title>
    <url>%2F2018%2F05%2F03%2F%E5%9C%A8localhost%E9%83%A8%E7%BD%B2super%E2%80%94dictionary%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%2F</url>
    <content type="text"><![CDATA[整理：房玉辉博客：https://charlienike.github.io星云链Dapp开发系列在本地网络（localhost）部署super-dictionary智能合约super-dictionary智能合约源码下载地址：https://github.com/15010159959/super-dictionary 1、解决本地交易网络错误问题：进入go/src/github.com/nebulasio/go-nebulas/conf/default文件夹，打开config.conf文件，找到以下代码： 1234567rpc &#123; rpc_listen: ["0.0.0.0:8684"] http_listen: ["0.0.0.0:8685"] http_module: ["api","admin"] # HTTP CORS allowed origins # http_cors: []&#125; 去掉最后一行代码的注释，并更改如下：http_cors: [&quot;*&quot;] 2、进入super-dictionary-master/lib文件夹：打开nebPay.js文件：找到第四行代码：var payUrl = &quot;http://18.221.150.42/api/pay&quot;;更改为：var payUrl = &quot;http://localhost:8685/api/pay&quot;; 3、启动节点：打开第一个终端窗口，启动第一个星云节点： 12cd $GOPATH/src/github.com/nebulasio/go-nebulas./neb -c conf/default/config.conf 再打开一个终端窗口，启动第一个矿工节点： 12cd $GOPATH/src/github.com/nebulasio/go-nebulas./neb -c conf/example/miner.conf 4、部署合约：打开web-wallet钱包，部署super-dictionary智能合约到星云链localhost网络：进入web-wallet文件夹，用浏览器打开index.html文件，点击合约，再点击部署，找到super-dictionary-master/smartContract文件夹下的super-dictionary.js文件，将全部代码粘贴到合约代码框内：选择钱包文件，输入密码，点击解锁，再点击测试，再点击提交：保存好合约地址：n1wfeKn7GSjo8GbAE64CgUPyxwqLrpWWLnK点击交易哈希，查看交易状态，下图为部署成功： 5、执行、调用合约，与前端交互：进入super-dictionary-master文件夹，用开发工具打开index.html文件，找到第190行代码，将合约地址粘贴过来：var dappAddress = &quot;n1wfeKn7GSjo8GbAE64CgUPyxwqLrpWWLnK&quot;;保存后，用浏览器打开index.html文件，随便输入“比特币”一词，可以看到，没有释义，但是底下有一句话： Failed to find related information. Do you want to add infromation for “比特币”? 并且add可以点击，点击add后可以添加释义，输入如下释义：“比特币（BitCoin）的概念最初由中本聪在2009年提出，根据中本聪的思路设计发布的开源软件以及建构其上的P2P网络。比特币是一种P2P形式的数字货币。”点击submit，之后会弹出WebExtensionWallet钱包页面，选择localhost当地钱包文件，输入密码“passphrase”，点击生成交易，再点击交易确认，正在打包：交易打包成功：查询，如图所示：至此，super-dictionary智能合约部署成功，前端调用合约成功。 版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信]]></content>
      <categories>
        <category>智能合约</category>
      </categories>
      <tags>
        <tag>星云链Dapp开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用go语言简单实现SHA256哈希算法]]></title>
    <url>%2F2018%2F05%2F01%2F%E7%94%A8go%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0SHA256%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%EF%BC%9A%2F</url>
    <content type="text"><![CDATA[用go语言简单实现SHA256哈希算法： 12345678910111213141516package mainimport ( "crypto/sha256" "fmt")func main() &#123; string := "Hello" //需要哈希的字符串内容 hash := sha256.New() //声明sha256哈希函数 hash.Write([]byte(string)) bs := hash.Sum(nil) fmt.Printf("%x", bs)&#125; 运行结果：185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969其中，hash.Write()写入需要生成哈希的内容，h.Sum()添加额外的[]byte到当前的哈希中。 生成符合某一条件的哈希：12345678910111213141516171819202122232425262728293031323334353637383940package mainimport ( "fmt" "crypto/sha256")func isvhd(hash string, diff int) bool &#123; var i int for i = 0; i &lt; len(hash); i++ &#123; if hash[i] != '8' &#123; //哈希字符串的前diff个字符是否为8，如果不为8，结束循环。 break &#125; &#125; return i &gt;= diff&#125;func main() &#123; nonce := 0 hash := "" shaobj := sha256.New() prehash := "0000fedaa499741317a18f1ad626f933776ad24822cb422634978bfe8005c94b" //prehash := "185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969" count := 0 //循环的次数 for !isvhd(hash, 4) &#123; nonce++ input := "100" + prehash + "Thu, 26 Apr 2018 03:30:54 GMT" + "A -&gt; B 1000" + string(nonce) shaobj.Write([]byte(input)) hash = fmt.Sprintf("%x", shaobj.Sum(nil)) fmt.Println(hash) count++ &#125; fmt.Println("count:", count) fmt.Println("nonce:", nonce) fmt.Println(hash) fmt.Println(len(hash)) //哈希字符串的长度&#125; 运行结果：············0c7d465c78faf8dcc359343df18d535497b6dee228577f84b236e908193c65228888448863c33dff9acdc99dc6b85ca3329716c4d6fa3f51a540e2b977347ac6count: 11743nonce: 117438888448863c33dff9acdc99dc6b85ca3329716c4d6fa3f51a540e2b977347ac664 分析：isvhd（）函数用来判断生成的哈希内容是否满足某一条件，此处为判断生成的哈希数，前4位数是否为8。若不满足这一条件，则给nonce加1，再次生成哈希，直到生成一个前4位数均为8的哈希，结束循环。生成了一个前四位数为8的哈希，哈希字符串长度为64，循环了11743次。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>sha256哈希算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用go语言爬虫珍爱网所有城市网址]]></title>
    <url>%2F2018%2F04%2F20%2F%E7%94%A8go%E8%AF%AD%E8%A8%80%E7%88%AC%E8%99%AB%E7%8F%8D%E7%88%B1%E7%BD%91%E6%89%80%E6%9C%89%E5%9F%8E%E5%B8%82%E7%BD%91%E5%9D%80%2F</url>
    <content type="text"><![CDATA[整理：房玉辉博客：https://charlienike.github.io爬虫珍爱网系列文章go语言爬虫入门第一课1、查看网站编码格式工具：GoLand，Chrome浏览器，珍爱网 所有城市页面 http://www.zhenai.com/zhenghun首先右键鼠标，查看网页源代码，查看网站编码格式，这里以gbk格式为例，， 123456789101112131415161718192021222324252627282930313233343536package mainimport ( "net/http" "fmt" "golang.org/x/text/transform" "golang.org/x/text/encoding/simplifiedchinese" "io/ioutil")const cityListURL = "http://www.zhenai.com/zhenghun"func main() &#123; resp, err := http.Get(cityListURL) if err != nil &#123; panic(err) //如果err不为空,说明出现错误数据，Panic结束程序。 &#125; defer resp.Body.Close() //关闭数据解析请求 if resp.StatusCode != http.StatusOK &#123; fmt.Println("Error:Status Code:", resp.StatusCode) &#125; // 以gbk格式读取网站源代码， utf8Reader := transform.NewReader(resp.Body, simplifiedchinese.GBK.NewDecoder()) // 读取网页所有数据，ReadAll方法返回值为[]byte字节数组，和err allData, err1 := ioutil.ReadAll(utf8Reader) if err1 != nil &#123; panic(err1) &#125; // 将字节数组转换为字符串，并打印输出 fmt.Println(string(allData))&#125; 网站编码格式有很多种，比如还有utf-8等格式，为了更好的封装，我们来写个方法，自动判断网站的编码格式， 12345678func determinEncoding(r io.Reader) encoding.Encoding &#123; bytes, err := bufio.NewReader(r).Peek(1024) if err != nil &#123; return unicode.UTF8 &#125; e, _, _ := charset.DetermineEncoding(bytes, "") return e&#125; 该方法的参数是resp.body,返回值即是编码格式。 2、观察目标字段看一下需要获取的字段长什么样，Chrome浏览器查看，在goland控制台打印， 1234567891011121314&lt;dd&gt; &lt;a href=&quot;http://www.zhenai.com/zhenghun/eerduosi&quot; class=&quot;&quot;&gt;鄂尔多斯&lt;/a&gt; &lt;a href=&quot;http://www.zhenai.com/zhenghun/enshi&quot; class=&quot;&quot;&gt;恩施&lt;/a&gt; &lt;a href=&quot;http://www.zhenai.com/zhenghun/ezhou&quot; class=&quot;&quot;&gt;鄂州&lt;/a&gt; &lt;/dd&gt; 可以看到，目标字段是很简单的格式，很容易获取，每一个a标签就是一个目标字段，正则表达式为：&lt;a href=&quot;(http://www.zhenai.com/zhenghun/[a-z0-9]+)&quot;[^&gt;]+&gt;([^&lt;]+)&lt;/a&gt;该正则表达式中有两个()，第一个括号中为目标网址，第二个括号中为城市名。 3、获取目标字段123match := regexp.MustCompile(`&lt;a href="(http://www.zhenai.com/zhenghun/[a-z0-9]+)"[^&gt;]+&gt;([^&lt;]+)&lt;/a&gt;`) bytes := match.FindAllSubmatch(allData, -1) regexp.MustCompile用来在文本中查找匹配正则表达式的内容。FindAllSubmatch方法的第2个参数表示查找次数，-1表示不限次数，查找多少次，就返回多少个字节数组；返回值是一个字节数组，里面有三个元素，是匹配到的结果，及其分组内容，返回值中的第 0 个元素是整个正则表达式的匹配结果，分组顺序按照“(”的出现次序而定，所以第 1 个元素是网址，第 2 个元素是城市名，接下来只需要遍历返回的字节数组，转化为字符串输出及得到最终结果。最后，全部代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package mainimport ( "net/http" "fmt" "io/ioutil" "regexp" "io" "golang.org/x/text/encoding" "bufio" "golang.org/x/net/html/charset" "golang.org/x/text/transform" "golang.org/x/text/encoding/simplifiedchinese")const cityListURL = "http://www.zhenai.com/zhenghun"func main() &#123; resp, err := http.Get(cityListURL) if err != nil &#123; panic(err) //如果err不为空,说明出现错误数据，Panic结束程序。 &#125; defer resp.Body.Close() //关闭数据解析请求 if resp.StatusCode != http.StatusOK &#123; fmt.Println("Error:Status Code:", resp.StatusCode) &#125; utf8Reader := transform.NewReader(resp.Body, simplifiedchinese.GBK.NewDecoder()) //e := determinEncoding(resp.Body) //utf8Reader := transform.NewReader(resp.Body, e.NewDecoder()) allData, err1 := ioutil.ReadAll(utf8Reader) if err1 != nil &#123; panic(err1) &#125; //fmt.Println(string(allData)) match := regexp.MustCompile(`&lt;a href="(http://www.zhenai.com/zhenghun/[a-z0-9]+)"[^&gt;]+&gt;([^&lt;]+)&lt;/a&gt;`) bytes := match.FindAllSubmatch(allData, 50) for key, value := range bytes &#123; fmt.Println(key+1, "城市：", string(value[2]), "网址：", string(value[1])) &#125;&#125;func determinEncoding(r io.Reader) encoding.Encoding &#123; bytes, err := bufio.NewReader(r).Peek(1024) if err != nil &#123; panic(err) &#125; e, _, _ := charset.DetermineEncoding(bytes, "") return e&#125; 结果如下： 1234561 城市： 阿坝 网址： http://www.zhenai.com/zhenghun/aba2 城市： 阿克苏 网址： http://www.zhenai.com/zhenghun/akesu......468 城市： 自贡 网址： http://www.zhenai.com/zhenghun/zigong469 城市： 资阳 网址： http://www.zhenai.com/zhenghun/ziyang1470 城市： 遵义 网址： http://www.zhenai.com/zhenghun/zunyi 版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>go语言爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac下生成RSA私钥和公钥]]></title>
    <url>%2F2017%2F05%2F01%2Fmac%E4%B8%8B%E7%94%9F%E6%88%90rsa%E7%A7%81%E9%92%A5%E5%92%8C%E5%85%AC%E9%92%A5%2F</url>
    <content type="text"><![CDATA[整理：房玉辉博客：https://charlienike.github.io第一种方式（执行第2步之后，需要输入两次开机密码）：打开终端：输入：openssl依次输入命令：1、制作私钥genrsa -out rsa_private_key.pem 20482、设置私钥为PKCS8格式pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM 注意：执行完第2步，终端会输出以—–BEGIN ENCRYPTED PRIVATE KEY—–开头，以—–END ENCRYPTED PRIVATE KEY—–结尾的私钥，不是RSA私钥：记住不要用此私钥，可以把这里的私钥保存一下，查看其长度，为1784。此时，/Users/（用户名）目录下也有了名为rsa_private_key.pem的私钥文件，可用记事本查看一下，是以—–BEGIN RSA PRIVATE KEY—–开头，以—–END RSA PRIVATE KEY—–结尾。这才是RSA私钥。3、通过私钥产生公钥rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem执行完第三步/Users/（用户名）目录下就已经有了两个文件：rsa_private_key.pemrsa_public_key.pem前者为私钥，后者为公钥。此时可以用记事本打开文件，公钥长度为450，私钥长度为1678，私钥与刚才控制台输出的私钥不一样也可以用命令行在终端查看秘钥：cat /Users/charlienike/rsa_private_key.pem### 第二种方式（不需要输密码）：打开终端：输入 openssl依次输入命令：1、genrsa -out rsa_private_key.pem 20482、pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM –nocrypt3、rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem命令执行过程中控制台不会输出私钥最后/Users/(用户名)目录下会生成两个文件，一个公钥，一个私钥，用记事本打开（或者用终端：cat 文件路径），公钥长度为450，私钥长度为1674。私钥的长度与第一种方式生成的私钥不一样长（1678、1674）。 注意：RSA私钥是以—–BEGIN RSA PRIVATE KEY—–开头，以—–END RSA PRIVATE KEY—–结尾，公钥是以—–BEGIN PUBLIC KEY—–开头，以—–END PUBLIC KEY—–结尾，第一种方式执行过程中终端输出的并不是RSA私钥。两种方式的不同是第二种方式的第2条命令后面多了个–nocrypt，第二种方式执行过程中不会输出私钥，也不需要输入密码，因此推荐使用第二种方式，以避免混淆。 版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>RSA秘钥</tag>
      </tags>
  </entry>
</search>
