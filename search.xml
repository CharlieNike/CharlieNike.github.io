<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>MWEB简介和使用帮助</title>
      <link href="/2018/05/01/MWeb%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/05/01/MWeb%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h1 id="欢迎使用-MWeb"><a href="#欢迎使用-MWeb" class="headerlink" title="欢迎使用 MWeb"></a>欢迎使用 MWeb</h1><p>首先介绍一下 MWeb 是什么，MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件。MWeb 使用的是 Github Flavored Markdown 语法，在使用 MWeb 前，建议你一定要去 <a href="http://zh.mweb.im/" target="_blank" rel="noopener">MWeb 官网首页</a> 看一下介绍视频，MWeb 官网也做了比较详细的帮助，建议你也看一下大概内容，帮助的网址为：<a href="http://zh.mweb.im/help.html" target="_blank" rel="noopener">http://zh.mweb.im/help.html</a>。</p><h2 id="需要您重点注意的"><a href="#需要您重点注意的" class="headerlink" title="需要您重点注意的"></a>需要您重点注意的</h2><p><img src="http://p83c9zj44.bkt.clouddn.com/chs.jpg" alt="chs_.pi"></p><a id="more"></a><p>MWeb 是有<strong>两种模式</strong>的：外部模式和文档库模式。MWeb 为了满足所有 Markdown 使用需求，设计了两种模式！外部模式用于打开和编辑所有本地 Markdown 文档。另外为了方便用 Markdown 记笔记，MWeb 设计了文档库模式，文档库中的文档也支持一键生成静态博客，以便于分享。关于两个模式的情况，还是建议您去看一下官网的视频和帮助。</p><h2 id="帮助我们改进-MWeb"><a href="#帮助我们改进-MWeb" class="headerlink" title="帮助我们改进 MWeb"></a>帮助我们改进 MWeb</h2><p>如果你喜欢 MWeb，想让它变得更好，你可以：</p><ol><li>推荐 MWeb，让更多的人知道。</li><li>给我们发反馈和建议：<a href="mailto:&#x63;&#x6f;&#x64;&#x65;&#114;&#x66;&#x6f;&#x72;&#97;&#114;&#116;&#x2b;&#50;&#x33;&#51;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109;" target="_blank" rel="noopener">&#x63;&#x6f;&#x64;&#x65;&#114;&#x66;&#x6f;&#x72;&#97;&#114;&#116;&#x2b;&#50;&#x33;&#51;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109;</a></li><li>在 Mac App Store 上评价 （如果是在 MAS 上购买的话）。</li></ol>]]></content>
      
      <categories>
          
          <category> MWEB使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MWeb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用go语言简单实现SHA256哈希算法</title>
      <link href="/2018/05/01/%E7%94%A8go%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0SHA256%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%EF%BC%9A/"/>
      <url>/2018/05/01/%E7%94%A8go%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0SHA256%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%EF%BC%9A/</url>
      <content type="html"><![CDATA[<p>用go语言简单实现SHA256哈希算法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"crypto/sha256"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">string</span> := <span class="string">"Hello"</span>  <span class="comment">//需要哈希的字符串内容</span></span><br><span class="line"></span><br><span class="line">hash := sha256.New()   <span class="comment">//声明sha256哈希函数</span></span><br><span class="line">hash.Write([]<span class="keyword">byte</span>(<span class="keyword">string</span>))</span><br><span class="line">bs := hash.Sum(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%x"</span>, bs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h5><p>185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969<br>其中，hash.Write()写入需要生成哈希的内容，h.Sum()添加额外的[]byte到当前的哈希中。</p><a id="more"></a><h5 id="生成符合某一条件的哈希："><a href="#生成符合某一条件的哈希：" class="headerlink" title="生成符合某一条件的哈希："></a>生成符合某一条件的哈希：</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"crypto/sha256"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isvhd</span><span class="params">(hash <span class="keyword">string</span>, diff <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>(hash); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> hash[i] != <span class="string">'8'</span> &#123;   <span class="comment">//哈希字符串的前diff个字符是否为8，如果不为8，结束循环。</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i &gt;= diff</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">nonce := <span class="number">0</span></span><br><span class="line">hash := <span class="string">""</span></span><br><span class="line"></span><br><span class="line">shaobj := sha256.New()</span><br><span class="line"></span><br><span class="line">prehash := <span class="string">"0000fedaa499741317a18f1ad626f933776ad24822cb422634978bfe8005c94b"</span></span><br><span class="line"><span class="comment">//prehash := "185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969"</span></span><br><span class="line">count := <span class="number">0</span>     <span class="comment">//循环的次数</span></span><br><span class="line"><span class="keyword">for</span> !isvhd(hash, <span class="number">4</span>) &#123;</span><br><span class="line">nonce++</span><br><span class="line">input := <span class="string">"100"</span> + prehash + <span class="string">"Thu, 26 Apr 2018 03:30:54 GMT"</span> + <span class="string">"A -&gt; B 1000"</span> + <span class="keyword">string</span>(nonce)</span><br><span class="line">shaobj.Write([]<span class="keyword">byte</span>(input))</span><br><span class="line">hash = fmt.Sprintf(<span class="string">"%x"</span>, shaobj.Sum(<span class="literal">nil</span>))</span><br><span class="line">fmt.Println(hash)</span><br><span class="line">count++</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"count:"</span>, count)</span><br><span class="line">fmt.Println(<span class="string">"nonce:"</span>, nonce)</span><br><span class="line">fmt.Println(hash)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(hash))     <span class="comment">//哈希字符串的长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果：-1"><a href="#运行结果：-1" class="headerlink" title="运行结果："></a>运行结果：</h5><p>············<br>0c7d465c78faf8dcc359343df18d535497b6dee228577f84b236e908193c6522<br>8888448863c33dff9acdc99dc6b85ca3329716c4d6fa3f51a540e2b977347ac6<br>count: 11743<br>nonce: 11743<br>8888448863c33dff9acdc99dc6b85ca3329716c4d6fa3f51a540e2b977347ac6<br>64</p><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>isvhd（）函数用来判断生成的哈希内容是否满足某一条件，此处为判断生成的哈希数，前4位数是否为8。若不满足这一条件，则给nonce加1，再次生成哈希，直到生成一个前4位数均为8的哈希，结束循环。<br>生成了一个前四位数为8的哈希，哈希字符串长度为64，循环了11743次。</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> go语言 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
