{"meta":{"title":"CharlieNike","subtitle":"房玉辉区块链博客","description":"拥抱这个时代，疯狂这个青春，用青春点亮未来，为时代树立标杆！","author":"房玉辉","url":"http://yoursite.com"},"pages":[{"title":"关于我","date":"2018-05-03T12:02:12.000Z","updated":"2018-05-06T08:39:44.679Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"房玉辉，区块链底层开发者、架构师，国内区块链高级专家。 联系我 微信： QQ："},{"title":"categories","date":"2018-05-04T12:30:30.000Z","updated":"2018-05-10T01:12:07.827Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-04-30T16:00:01.000Z","updated":"2018-05-10T01:09:46.950Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"在本地网络部署super—dictionary智能合约","slug":"在localhost部署super—dictionary智能合约","date":"2018-05-03T02:10:00.000Z","updated":"2018-05-08T15:43:56.272Z","comments":true,"path":"2018/05/03/在localhost部署super—dictionary智能合约/","link":"","permalink":"http://yoursite.com/2018/05/03/在localhost部署super—dictionary智能合约/","excerpt":"整理：房玉辉博客：https://charlienike.github.io星云链Dapp开发系列在本地网络（localhost）部署super-dictionary智能合约super-dictionary智能合约源码下载地址：https://github.com/15010159959/super-dictionary 1、解决本地交易网络错误问题：进入go/src/github.com/nebulasio/go-nebulas/conf/default文件夹，打开config.conf文件，找到以下代码： 1234567rpc &#123; rpc_listen: [\"0.0.0.0:8684\"] http_listen: [\"0.0.0.0:8685\"] http_module: [\"api\",\"admin\"] # HTTP CORS allowed origins # http_cors: []&#125; 去掉最后一行代码的注释，并更改如下：http_cors: [&quot;*&quot;]","text":"整理：房玉辉博客：https://charlienike.github.io星云链Dapp开发系列在本地网络（localhost）部署super-dictionary智能合约super-dictionary智能合约源码下载地址：https://github.com/15010159959/super-dictionary 1、解决本地交易网络错误问题：进入go/src/github.com/nebulasio/go-nebulas/conf/default文件夹，打开config.conf文件，找到以下代码： 1234567rpc &#123; rpc_listen: [\"0.0.0.0:8684\"] http_listen: [\"0.0.0.0:8685\"] http_module: [\"api\",\"admin\"] # HTTP CORS allowed origins # http_cors: []&#125; 去掉最后一行代码的注释，并更改如下：http_cors: [&quot;*&quot;] 2、进入super-dictionary-master/lib文件夹：打开nebPay.js文件：找到第四行代码：var payUrl = &quot;http://18.221.150.42/api/pay&quot;;更改为：var payUrl = &quot;http://localhost:8685/api/pay&quot;; 3、启动节点：打开第一个终端窗口，启动第一个星云节点： 12cd $GOPATH/src/github.com/nebulasio/go-nebulas./neb -c conf/default/config.conf 再打开一个终端窗口，启动第一个矿工节点： 12cd $GOPATH/src/github.com/nebulasio/go-nebulas./neb -c conf/example/miner.conf 4、部署合约：打开web-wallet钱包，部署super-dictionary智能合约到星云链localhost网络：进入web-wallet文件夹，用浏览器打开index.html文件，点击合约，再点击部署，找到super-dictionary-master/smartContract文件夹下的super-dictionary.js文件，将全部代码粘贴到合约代码框内：选择钱包文件，输入密码，点击解锁，再点击测试，再点击提交：保存好合约地址：n1wfeKn7GSjo8GbAE64CgUPyxwqLrpWWLnK点击交易哈希，查看交易状态，下图为部署成功： 5、执行、调用合约，与前端交互：进入super-dictionary-master文件夹，用开发工具打开index.html文件，找到第190行代码，将合约地址粘贴过来：var dappAddress = &quot;n1wfeKn7GSjo8GbAE64CgUPyxwqLrpWWLnK&quot;;保存后，用浏览器打开index.html文件，随便输入“比特币”一词，可以看到，没有释义，但是底下有一句话： Failed to find related information. Do you want to add infromation for “比特币”? 并且add可以点击，点击add后可以添加释义，输入如下释义：“比特币（BitCoin）的概念最初由中本聪在2009年提出，根据中本聪的思路设计发布的开源软件以及建构其上的P2P网络。比特币是一种P2P形式的数字货币。”点击submit，之后会弹出WebExtensionWallet钱包页面，选择localhost当地钱包文件，输入密码“passphrase”，点击生成交易，再点击交易确认，正在打包：交易打包成功：查询，如图所示：至此，super-dictionary智能合约部署成功，前端调用合约成功。 版权声明：博客中的文章版权归博主所有，未经授权，禁止转载，转载请注明出处，合作请点击“关于我”，扫码添加微信","categories":[{"name":"智能合约","slug":"智能合约","permalink":"http://yoursite.com/categories/智能合约/"}],"tags":[{"name":"星云链Dapp开发","slug":"星云链Dapp开发","permalink":"http://yoursite.com/tags/星云链Dapp开发/"}]},{"title":"用go语言简单实现SHA256哈希算法","slug":"用go语言简单实现SHA256哈希算法：","date":"2018-05-01T15:36:20.000Z","updated":"2018-05-10T01:01:56.098Z","comments":true,"path":"2018/05/01/用go语言简单实现SHA256哈希算法：/","link":"","permalink":"http://yoursite.com/2018/05/01/用go语言简单实现SHA256哈希算法：/","excerpt":"用go语言简单实现SHA256哈希算法： 12345678910111213141516package mainimport ( \"crypto/sha256\" \"fmt\")func main() &#123; string := \"Hello\" //需要哈希的字符串内容 hash := sha256.New() //声明sha256哈希函数 hash.Write([]byte(string)) bs := hash.Sum(nil) fmt.Printf(\"%x\", bs)&#125; 运行结果：185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969其中，hash.Write()写入需要生成哈希的内容，h.Sum()添加额外的[]byte到当前的哈希中。","text":"用go语言简单实现SHA256哈希算法： 12345678910111213141516package mainimport ( \"crypto/sha256\" \"fmt\")func main() &#123; string := \"Hello\" //需要哈希的字符串内容 hash := sha256.New() //声明sha256哈希函数 hash.Write([]byte(string)) bs := hash.Sum(nil) fmt.Printf(\"%x\", bs)&#125; 运行结果：185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969其中，hash.Write()写入需要生成哈希的内容，h.Sum()添加额外的[]byte到当前的哈希中。 生成符合某一条件的哈希：12345678910111213141516171819202122232425262728293031323334353637383940package mainimport ( \"fmt\" \"crypto/sha256\")func isvhd(hash string, diff int) bool &#123; var i int for i = 0; i &lt; len(hash); i++ &#123; if hash[i] != '8' &#123; //哈希字符串的前diff个字符是否为8，如果不为8，结束循环。 break &#125; &#125; return i &gt;= diff&#125;func main() &#123; nonce := 0 hash := \"\" shaobj := sha256.New() prehash := \"0000fedaa499741317a18f1ad626f933776ad24822cb422634978bfe8005c94b\" //prehash := \"185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969\" count := 0 //循环的次数 for !isvhd(hash, 4) &#123; nonce++ input := \"100\" + prehash + \"Thu, 26 Apr 2018 03:30:54 GMT\" + \"A -&gt; B 1000\" + string(nonce) shaobj.Write([]byte(input)) hash = fmt.Sprintf(\"%x\", shaobj.Sum(nil)) fmt.Println(hash) count++ &#125; fmt.Println(\"count:\", count) fmt.Println(\"nonce:\", nonce) fmt.Println(hash) fmt.Println(len(hash)) //哈希字符串的长度&#125; 运行结果：············0c7d465c78faf8dcc359343df18d535497b6dee228577f84b236e908193c65228888448863c33dff9acdc99dc6b85ca3329716c4d6fa3f51a540e2b977347ac6count: 11743nonce: 117438888448863c33dff9acdc99dc6b85ca3329716c4d6fa3f51a540e2b977347ac664 分析：isvhd（）函数用来判断生成的哈希内容是否满足某一条件，此处为判断生成的哈希数，前4位数是否为8。若不满足这一条件，则给nonce加1，再次生成哈希，直到生成一个前4位数均为8的哈希，结束循环。生成了一个前四位数为8的哈希，哈希字符串长度为64，循环了11743次。","categories":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/算法/"}],"tags":[{"name":"sha256哈希算法","slug":"sha256哈希算法","permalink":"http://yoursite.com/tags/sha256哈希算法/"}]}]}