{"meta":{"title":"CharlieNike","subtitle":null,"description":"拥抱这个时代，疯狂这个青春，用青春点亮未来，为时代树立标杆！","author":null,"url":"http://yoursite.com"},"pages":[{"title":"关于我","date":"2018-05-03T12:02:12.000Z","updated":"2018-05-05T15:12:57.684Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"房玉辉，区块链底层开发者、架构师，国内区块链高级专家。 联系我 微信： QQ："},{"title":"categories","date":"2018-05-04T12:30:30.000Z","updated":"2018-05-04T12:31:41.462Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"MWEB简介和使用帮助","slug":"MWeb使用简介","date":"2018-05-01T15:36:20.000Z","updated":"2018-05-05T14:54:17.502Z","comments":true,"path":"2018/05/01/MWeb使用简介/","link":"","permalink":"http://yoursite.com/2018/05/01/MWeb使用简介/","excerpt":"欢迎使用 MWeb首先介绍一下 MWeb 是什么，MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件。MWeb 使用的是 Github Flavored Markdown 语法，在使用 MWeb 前，建议你一定要去 MWeb 官网首页 看一下介绍视频，MWeb 官网也做了比较详细的帮助，建议你也看一下大概内容，帮助的网址为：http://zh.mweb.im/help.html。 需要您重点注意的","text":"欢迎使用 MWeb首先介绍一下 MWeb 是什么，MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件。MWeb 使用的是 Github Flavored Markdown 语法，在使用 MWeb 前，建议你一定要去 MWeb 官网首页 看一下介绍视频，MWeb 官网也做了比较详细的帮助，建议你也看一下大概内容，帮助的网址为：http://zh.mweb.im/help.html。 需要您重点注意的 MWeb 是有两种模式的：外部模式和文档库模式。MWeb 为了满足所有 Markdown 使用需求，设计了两种模式！外部模式用于打开和编辑所有本地 Markdown 文档。另外为了方便用 Markdown 记笔记，MWeb 设计了文档库模式，文档库中的文档也支持一键生成静态博客，以便于分享。关于两个模式的情况，还是建议您去看一下官网的视频和帮助。 帮助我们改进 MWeb如果你喜欢 MWeb，想让它变得更好，你可以： 推荐 MWeb，让更多的人知道。 给我们发反馈和建议：&#x63;&#111;&#100;&#101;&#114;&#102;&#111;&#x72;&#x61;&#x72;&#116;&#x2b;&#x32;&#51;&#51;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d; 在 Mac App Store 上评价 （如果是在 MAS 上购买的话）。","categories":[{"name":"MWEB使用","slug":"MWEB使用","permalink":"http://yoursite.com/categories/MWEB使用/"}],"tags":[{"name":"MWeb","slug":"MWeb","permalink":"http://yoursite.com/tags/MWeb/"}]},{"title":"用go语言简单实现SHA256哈希算法","slug":"用go语言简单实现SHA256哈希算法：","date":"2018-05-01T15:36:20.000Z","updated":"2018-05-04T14:14:06.373Z","comments":true,"path":"2018/05/01/用go语言简单实现SHA256哈希算法：/","link":"","permalink":"http://yoursite.com/2018/05/01/用go语言简单实现SHA256哈希算法：/","excerpt":"用go语言简单实现SHA256哈希算法： 12345678910111213141516package mainimport ( \"crypto/sha256\" \"fmt\")func main() &#123; string := \"Hello\" //需要哈希的字符串内容 hash := sha256.New() //声明sha256哈希函数 hash.Write([]byte(string)) bs := hash.Sum(nil) fmt.Printf(\"%x\", bs)&#125; 运行结果：185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969其中，hash.Write()写入需要生成哈希的内容，h.Sum()添加额外的[]byte到当前的哈希中。","text":"用go语言简单实现SHA256哈希算法： 12345678910111213141516package mainimport ( \"crypto/sha256\" \"fmt\")func main() &#123; string := \"Hello\" //需要哈希的字符串内容 hash := sha256.New() //声明sha256哈希函数 hash.Write([]byte(string)) bs := hash.Sum(nil) fmt.Printf(\"%x\", bs)&#125; 运行结果：185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969其中，hash.Write()写入需要生成哈希的内容，h.Sum()添加额外的[]byte到当前的哈希中。 生成符合某一条件的哈希：12345678910111213141516171819202122232425262728293031323334353637383940package mainimport ( \"fmt\" \"crypto/sha256\")func isvhd(hash string, diff int) bool &#123; var i int for i = 0; i &lt; len(hash); i++ &#123; if hash[i] != '8' &#123; //哈希字符串的前diff个字符是否为8，如果不为8，结束循环。 break &#125; &#125; return i &gt;= diff&#125;func main() &#123; nonce := 0 hash := \"\" shaobj := sha256.New() prehash := \"0000fedaa499741317a18f1ad626f933776ad24822cb422634978bfe8005c94b\" //prehash := \"185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969\" count := 0 //循环的次数 for !isvhd(hash, 4) &#123; nonce++ input := \"100\" + prehash + \"Thu, 26 Apr 2018 03:30:54 GMT\" + \"A -&gt; B 1000\" + string(nonce) shaobj.Write([]byte(input)) hash = fmt.Sprintf(\"%x\", shaobj.Sum(nil)) fmt.Println(hash) count++ &#125; fmt.Println(\"count:\", count) fmt.Println(\"nonce:\", nonce) fmt.Println(hash) fmt.Println(len(hash)) //哈希字符串的长度&#125; 运行结果：············0c7d465c78faf8dcc359343df18d535497b6dee228577f84b236e908193c65228888448863c33dff9acdc99dc6b85ca3329716c4d6fa3f51a540e2b977347ac6count: 11743nonce: 117438888448863c33dff9acdc99dc6b85ca3329716c4d6fa3f51a540e2b977347ac664 分析：isvhd（）函数用来判断生成的哈希内容是否满足某一条件，此处为判断生成的哈希数，前4位数是否为8。若不满足这一条件，则给nonce加1，再次生成哈希，直到生成一个前4位数均为8的哈希，结束循环。生成了一个前四位数为8的哈希，哈希字符串长度为64，循环了11743次。","categories":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/算法/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"},{"name":"go语言","slug":"go语言","permalink":"http://yoursite.com/tags/go语言/"}]}]}